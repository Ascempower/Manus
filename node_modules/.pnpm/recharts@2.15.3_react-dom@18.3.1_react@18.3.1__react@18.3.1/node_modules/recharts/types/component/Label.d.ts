import React, { ReactNode, ReactElement, SVGProps } from 'react';
import { ViewBox } from '../util/types';
export type ContentType = ReactElement | ((props: Props) => ReactNode);
export type LabelPosition = &apos;top&apos; | &apos;left&apos; | &apos;right&apos; | &apos;bottom&apos; | &apos;inside&apos; | &apos;outside&apos; | &apos;insideLeft&apos; | &apos;insideRight&apos; | &apos;insideTop&apos; | &apos;insideBottom&apos; | &apos;insideTopLeft&apos; | &apos;insideBottomLeft&apos; | &apos;insideTopRight&apos; | &apos;insideBottomRight&apos; | &apos;insideStart&apos; | &apos;insideEnd&apos; | &apos;end&apos; | &apos;center&apos; | &apos;centerTop&apos; | &apos;centerBottom&apos; | &apos;middle&apos; | {
    x?: number;
    y?: number;
};
interface LabelProps {
    viewBox?: ViewBox;
    parentViewBox?: ViewBox;
    formatter?: Function;
    value?: number | string;
    offset?: number;
    position?: LabelPosition;
    children?: ReactNode;
    className?: string;
    content?: ContentType;
    textBreakAll?: boolean;
    angle?: number;
    index?: number;
}
export type Props = Omit<SVGProps<SVGTextElement>, &apos;viewBox&apos;> & LabelProps;
export type ImplicitLabelType = boolean | string | number | ReactElement<SVGElement> | ((props: any) => ReactElement<SVGElement>) | Props;
export declare function Label({ offset, ...restProps }: Props): React.JSX.Element;
export declare namespace Label {
    var displayName: string;
    var parseViewBox: (props: any) => ViewBox;
    var renderCallByParent: (parentProps: {
        children?: React.ReactNode;
        label?: unknown;
    }, viewBox?: ViewBox, checkPropsLabel?: boolean) => React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
}
export {};

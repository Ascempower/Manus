/**
 * @fileoverview The rule should warn against code that tries to compare against -0.
 * @author Aladdin-ADD <hh_2013@foxmail.com>
 */
&quot;use strict&quot;;

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import(&apos;../types&apos;).Rule.RuleModule} */
module.exports = {
	meta: {
		type: &quot;problem&quot;,

		docs: {
			description: &quot;Disallow comparing against `-0`&quot;,
			recommended: true,
			url: &quot;https://eslint.org/docs/latest/rules/no-compare-neg-zero&quot;,
		},

		fixable: null,
		schema: [],

		messages: {
			unexpected:
				&quot;Do not use the &apos;{{operator}}&apos; operator to compare against -0.&quot;,
		},
	},

	create(context) {
		//--------------------------------------------------------------------------
		// Helpers
		//--------------------------------------------------------------------------

		/**
		 * Checks a given node is -0
		 * @param {ASTNode} node A node to check.
		 * @returns {boolean} `true` if the node is -0.
		 */
		function isNegZero(node) {
			return (
				node.type === &quot;UnaryExpression&quot; &&
				node.operator === &quot;-&quot; &&
				node.argument.type === &quot;Literal&quot; &&
				node.argument.value === 0
			);
		}
		const OPERATORS_TO_CHECK = new Set([
			&quot;>&quot;,
			&quot;>=&quot;,
			&quot;<",
			"<=",
			"==",
			"===",
			"!=",
			"!==",
		]);

		return {
			BinaryExpression(node) {
				if (OPERATORS_TO_CHECK.has(node.operator)) {
					if (isNegZero(node.left) || isNegZero(node.right)) {
						context.report({
							node,
							messageId: "unexpected",
							data: { operator: node.operator },
						});
					}
				}
			},
		};
	},
};

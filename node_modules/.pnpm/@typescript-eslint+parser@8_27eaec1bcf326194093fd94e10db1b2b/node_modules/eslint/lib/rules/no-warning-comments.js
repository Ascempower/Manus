/**
 * @fileoverview Rule that warns about used warning comments
 * @author Alexander Schmidt <https://github.com/lxanders>
 */

&quot;use strict&quot;;

const escapeRegExp = require(&quot;escape-string-regexp&quot;);
const astUtils = require(&quot;./utils/ast-utils&quot;);

const CHAR_LIMIT = 40;

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import(&apos;../types&apos;).Rule.RuleModule} */
module.exports = {
	meta: {
		type: &quot;suggestion&quot;,

		defaultOptions: [
			{
				location: &quot;start&quot;,
				terms: [&quot;todo&quot;, &quot;fixme&quot;, &quot;xxx&quot;],
			},
		],

		docs: {
			description: &quot;Disallow specified warning terms in comments&quot;,
			recommended: false,
			frozen: true,
			url: &quot;https://eslint.org/docs/latest/rules/no-warning-comments&quot;,
		},

		schema: [
			{
				type: &quot;object&quot;,
				properties: {
					terms: {
						type: &quot;array&quot;,
						items: {
							type: &quot;string&quot;,
						},
					},
					location: {
						enum: [&quot;start&quot;, &quot;anywhere&quot;],
					},
					decoration: {
						type: &quot;array&quot;,
						items: {
							type: &quot;string&quot;,
							pattern: &quot;^\\S$&quot;,
						},
						minItems: 1,
						uniqueItems: true,
					},
				},
				additionalProperties: false,
			},
		],

		messages: {
			unexpectedComment:
				&quot;Unexpected &apos;{{matchedTerm}}&apos; comment: &apos;{{comment}}&apos;.&quot;,
		},
	},

	create(context) {
		const sourceCode = context.sourceCode;
		const [{ decoration, location, terms: warningTerms }] = context.options;
		const escapedDecoration = escapeRegExp(
			decoration ? decoration.join(&quot;&quot;) : &quot;&quot;,
		);
		const selfConfigRegEx = /\bno-warning-comments\b/u;

		/**
		 * Convert a warning term into a RegExp which will match a comment containing that whole word in the specified
		 * location (&quot;start&quot; or &quot;anywhere&quot;). If the term starts or ends with non word characters, then the match will not
		 * require word boundaries on that side.
		 * @param {string} term A term to convert to a RegExp
		 * @returns {RegExp} The term converted to a RegExp
		 */
		function convertToRegExp(term) {
			const escaped = escapeRegExp(term);

			/*
			 * When matching at the start, ignore leading whitespace, and
			 * there&apos;s no need to worry about word boundaries.
			 *
			 * These expressions for the prefix and suffix are designed as follows:
			 * ^   handles any terms at the beginning of a comment.
			 *     e.g. terms [&quot;TODO&quot;] matches `//TODO something`
			 * $   handles any terms at the end of a comment
			 *     e.g. terms [&quot;TODO&quot;] matches `// something TODO`
			 * \b  handles terms preceded/followed by word boundary
			 *     e.g. terms: [&quot;!FIX&quot;, &quot;FIX!&quot;] matches `// FIX!something` or `// something!FIX`
			 *          terms: [&quot;FIX&quot;] matches `// FIX!` or `// !FIX`, but not `// fixed or affix`
			 *
			 * For location start:
			 * [\s]* handles optional leading spaces
			 *     e.g. terms [&quot;TODO&quot;] matches `//    TODO something`
			 * [\s\*]* (where &quot;\*&quot; is the escaped string of decoration)
			 *     handles optional leading spaces or decoration characters (for &quot;start&quot; location only)
			 *     e.g. terms [&quot;TODO&quot;] matches `/**** TODO something ... `
			 */
			const wordBoundary = &quot;\\b&quot;;

			let prefix = &quot;&quot;;

			if (location === &quot;start&quot;) {
				prefix = `^[\\s${escapedDecoration}]*`;
			} else if (/^\w/u.test(term)) {
				prefix = wordBoundary;
			}

			const suffix = /\w$/u.test(term) ? wordBoundary : &quot;&quot;;
			const flags = &quot;iu&quot;; // Case-insensitive with Unicode case folding.

			/*
			 * For location &quot;start&quot;, the typical regex is:
			 *   /^[\s]*ESCAPED_TERM\b/iu.
			 * Or if decoration characters are specified (e.g. &quot;*&quot;), then any of
			 * those characters may appear in any order at the start:
			 *   /^[\s\*]*ESCAPED_TERM\b/iu.
			 *
			 * For location &quot;anywhere&quot; the typical regex is
			 *   /\bESCAPED_TERM\b/iu
			 *
			 * If it starts or ends with non-word character, the prefix and suffix are empty, respectively.
			 */
			return new RegExp(`${prefix}${escaped}${suffix}`, flags);
		}

		const warningRegExps = warningTerms.map(convertToRegExp);

		/**
		 * Checks the specified comment for matches of the configured warning terms and returns the matches.
		 * @param {string} comment The comment which is checked.
		 * @returns {Array} All matched warning terms for this comment.
		 */
		function commentContainsWarningTerm(comment) {
			const matches = [];

			warningRegExps.forEach((regex, index) => {
				if (regex.test(comment)) {
					matches.push(warningTerms[index]);
				}
			});

			return matches;
		}

		/**
		 * Checks the specified node for matching warning comments and reports them.
		 * @param {ASTNode} node The AST node being checked.
		 * @returns {void} undefined.
		 */
		function checkComment(node) {
			const comment = node.value;

			if (
				astUtils.isDirectiveComment(node) &&
				selfConfigRegEx.test(comment)
			) {
				return;
			}

			const matches = commentContainsWarningTerm(comment);

			matches.forEach(matchedTerm => {
				let commentToDisplay = &quot;&quot;;
				let truncated = false;

				for (const c of comment.trim().split(/\s+/u)) {
					const tmp = commentToDisplay
						? `${commentToDisplay} ${c}`
						: c;

					if (tmp.length <= CHAR_LIMIT) {
						commentToDisplay = tmp;
					} else {
						truncated = true;
						break;
					}
				}

				context.report({
					node,
					messageId: "unexpectedComment",
					data: {
						matchedTerm,
						comment: `${commentToDisplay}${truncated ? "..." : ""}`,
					},
				});
			});
		}

		return {
			Program() {
				const comments = sourceCode.getAllComments();

				comments
					.filter(token => token.type !== "Shebang")
					.forEach(checkComment);
			},
		};
	},
};

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsedType = void 0;
exports.default = default_1;
const util = __importStar(require("../core/util.js"));
const parsedType = (data) => {
    const t = typeof data;
    switch (t) {
        case &quot;number&quot;: {
            return Number.isNaN(data) ? &quot;NaN&quot; : &quot;number&quot;;
        }
        case &quot;object&quot;: {
            if (Array.isArray(data)) {
                return &quot;array&quot;;
            }
            if (data === null) {
                return &quot;null&quot;;
            }
            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
                return data.constructor.name;
            }
        }
    }
    return t;
};
exports.parsedType = parsedType;
const error = () => {
    const Sizable = {
        string: { unit: &quot;karakter&quot;, verb: &quot;olmalı&quot; },
        file: { unit: &quot;bayt&quot;, verb: &quot;olmalı&quot; },
        array: { unit: &quot;öğe&quot;, verb: &quot;olmalı&quot; },
        set: { unit: &quot;öğe&quot;, verb: &quot;olmalı&quot; },
    };
    function getSizing(origin) {
        return Sizable[origin] ?? null;
    }
    const Nouns = {
        regex: &quot;girdi&quot;,
        email: &quot;e-posta adresi&quot;,
        url: &quot;URL&quot;,
        emoji: &quot;emoji&quot;,
        uuid: &quot;UUID&quot;,
        uuidv4: &quot;UUIDv4&quot;,
        uuidv6: &quot;UUIDv6&quot;,
        nanoid: &quot;nanoid&quot;,
        guid: &quot;GUID&quot;,
        cuid: &quot;cuid&quot;,
        cuid2: &quot;cuid2&quot;,
        ulid: &quot;ULID&quot;,
        xid: &quot;XID&quot;,
        ksuid: &quot;KSUID&quot;,
        datetime: &quot;ISO tarih ve saat&quot;,
        date: &quot;ISO tarih&quot;,
        time: &quot;ISO saat&quot;,
        duration: &quot;ISO süre&quot;,
        ipv4: &quot;IPv4 adresi&quot;,
        ipv6: &quot;IPv6 adresi&quot;,
        cidrv4: &quot;IPv4 aralığı&quot;,
        cidrv6: &quot;IPv6 aralığı&quot;,
        base64: &quot;base64 ile şifrelenmiş metin&quot;,
        base64url: &quot;base64url ile şifrelenmiş metin&quot;,
        json_string: &quot;JSON dizesi&quot;,
        e164: &quot;E.164 sayısı&quot;,
        jwt: &quot;JWT&quot;,
        template_literal: &quot;Şablon dizesi&quot;,
    };
    return (issue) => {
        switch (issue.code) {
            case &quot;invalid_type&quot;:
                return `Geçersiz değer: beklenen ${issue.expected}, alınan ${(0, exports.parsedType)(issue.input)}`;
            case &quot;invalid_value&quot;:
                if (issue.values.length === 1)
                    return `Geçersiz değer: beklenen ${util.stringifyPrimitive(issue.values[0])}`;
                return `Geçersiz seçenek: aşağıdakilerden biri olmalı: ${util.joinValues(issue.values, &quot;|&quot;)}`;
            case &quot;too_big&quot;: {
                const adj = issue.inclusive ? &quot;<=" : "<";
                const sizing = getSizing(issue.origin);
                if (sizing)
                    return `Çok büyük: beklenen ${issue.origin ?? "değer"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? "öğe"}`;
                return `Çok büyük: beklenen ${issue.origin ?? "değer"} ${adj}${issue.maximum.toString()}`;
            }
            case "too_small": {
                const adj = issue.inclusive ? ">=" : ">";
                const sizing = getSizing(issue.origin);
                if (sizing)
                    return `Çok küçük: beklenen ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit}`;
                return `Çok küçük: beklenen ${issue.origin} ${adj}${issue.minimum.toString()}`;
            }
            case "invalid_format": {
                const _issue = issue;
                if (_issue.format === "starts_with")
                    return `Geçersiz metin: "${_issue.prefix}" ile başlamalı`;
                if (_issue.format === "ends_with")
                    return `Geçersiz metin: "${_issue.suffix}" ile bitmeli`;
                if (_issue.format === "includes")
                    return `Geçersiz metin: "${_issue.includes}" içermeli`;
                if (_issue.format === "regex")
                    return `Geçersiz metin: ${_issue.pattern} desenine uymalı`;
                return `Geçersiz ${Nouns[_issue.format] ?? issue.format}`;
            }
            case "not_multiple_of":
                return `Geçersiz sayı: ${issue.divisor} ile tam bölünebilmeli`;
            case "unrecognized_keys":
                return `Tanınmayan anahtar${issue.keys.length > 1 ? "lar" : ""}: ${util.joinValues(issue.keys, ", ")}`;
            case "invalid_key":
                return `${issue.origin} içinde geçersiz anahtar`;
            case "invalid_union":
                return "Geçersiz değer";
            case "invalid_element":
                return `${issue.origin} içinde geçersiz değer`;
            default:
                return `Geçersiz değer`;
        }
    };
};
function default_1() {
    return {
        localeError: error(),
    };
}

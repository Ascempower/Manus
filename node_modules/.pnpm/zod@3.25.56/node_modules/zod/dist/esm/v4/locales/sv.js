import * as util from "../core/util.js";
const error = () => {
    const Sizable = {
        string: { unit: &quot;tecken&quot;, verb: &quot;att ha&quot; },
        file: { unit: &quot;bytes&quot;, verb: &quot;att ha&quot; },
        array: { unit: &quot;objekt&quot;, verb: &quot;att innehålla&quot; },
        set: { unit: &quot;objekt&quot;, verb: &quot;att innehålla&quot; },
    };
    function getSizing(origin) {
        return Sizable[origin] ?? null;
    }
    const parsedType = (data) => {
        const t = typeof data;
        switch (t) {
            case &quot;number&quot;: {
                return Number.isNaN(data) ? &quot;NaN&quot; : &quot;antal&quot;;
            }
            case &quot;object&quot;: {
                if (Array.isArray(data)) {
                    return &quot;lista&quot;;
                }
                if (data === null) {
                    return &quot;null&quot;;
                }
                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
                    return data.constructor.name;
                }
            }
        }
        return t;
    };
    const Nouns = {
        regex: &quot;reguljärt uttryck&quot;,
        email: &quot;e-postadress&quot;,
        url: &quot;URL&quot;,
        emoji: &quot;emoji&quot;,
        uuid: &quot;UUID&quot;,
        uuidv4: &quot;UUIDv4&quot;,
        uuidv6: &quot;UUIDv6&quot;,
        nanoid: &quot;nanoid&quot;,
        guid: &quot;GUID&quot;,
        cuid: &quot;cuid&quot;,
        cuid2: &quot;cuid2&quot;,
        ulid: &quot;ULID&quot;,
        xid: &quot;XID&quot;,
        ksuid: &quot;KSUID&quot;,
        datetime: &quot;ISO-datum och tid&quot;,
        date: &quot;ISO-datum&quot;,
        time: &quot;ISO-tid&quot;,
        duration: &quot;ISO-varaktighet&quot;,
        ipv4: &quot;IPv4-intervall&quot;,
        ipv6: &quot;IPv6-intervall&quot;,
        cidrv4: &quot;IPv4-spektrum&quot;,
        cidrv6: &quot;IPv6-spektrum&quot;,
        base64: &quot;base64-kodad sträng&quot;,
        base64url: &quot;base64url-kodad sträng&quot;,
        json_string: &quot;JSON-sträng&quot;,
        e164: &quot;E.164-nummer&quot;,
        jwt: &quot;JWT&quot;,
        template_literal: &quot;mall-literal&quot;,
    };
    return (issue) => {
        switch (issue.code) {
            case &quot;invalid_type&quot;:
                return `Ogiltig inmatning: förväntat ${issue.expected}, fick ${parsedType(issue.input)}`;
            case &quot;invalid_value&quot;:
                if (issue.values.length === 1)
                    return `Ogiltig inmatning: förväntat ${util.stringifyPrimitive(issue.values[0])}`;
                return `Ogiltigt val: förväntade en av ${util.joinValues(issue.values, &quot;|&quot;)}`;
            case &quot;too_big&quot;: {
                const adj = issue.inclusive ? &quot;<=" : "<";
                const sizing = getSizing(issue.origin);
                if (sizing) {
                    return `För stor(t): förväntade ${issue.origin ?? "värdet"} att ha ${adj}${issue.maximum.toString()} ${sizing.unit ?? "element"}`;
                }
                return `För stor(t): förväntat ${issue.origin ?? "värdet"} att ha ${adj}${issue.maximum.toString()}`;
            }
            case "too_small": {
                const adj = issue.inclusive ? ">=" : ">";
                const sizing = getSizing(issue.origin);
                if (sizing) {
                    return `För lite(t): förväntade ${issue.origin ?? "värdet"} att ha ${adj}${issue.minimum.toString()} ${sizing.unit}`;
                }
                return `För lite(t): förväntade ${issue.origin ?? "värdet"} att ha ${adj}${issue.minimum.toString()}`;
            }
            case "invalid_format": {
                const _issue = issue;
                if (_issue.format === "starts_with") {
                    return `Ogiltig sträng: måste börja med "${_issue.prefix}"`;
                }
                if (_issue.format === "ends_with")
                    return `Ogiltig sträng: måste sluta med "${_issue.suffix}"`;
                if (_issue.format === "includes")
                    return `Ogiltig sträng: måste innehålla "${_issue.includes}"`;
                if (_issue.format === "regex")
                    return `Ogiltig sträng: måste matcha mönstret "${_issue.pattern}"`;
                return `Ogiltig(t) ${Nouns[_issue.format] ?? issue.format}`;
            }
            case "not_multiple_of":
                return `Ogiltigt tal: måste vara en multipel av ${issue.divisor}`;
            case "unrecognized_keys":
                return `${issue.keys.length > 1 ? "Okända nycklar" : "Okänd nyckel"}: ${util.joinValues(issue.keys, ", ")}`;
            case "invalid_key":
                return `Ogiltig nyckel i ${issue.origin ?? "värdet"}`;
            case "invalid_union":
                return "Ogiltig input";
            case "invalid_element":
                return `Ogiltigt värde i ${issue.origin ?? "värdet"}`;
            default:
                return `Ogiltig input`;
        }
    };
};
export default function () {
    return {
        localeError: error(),
    };
}

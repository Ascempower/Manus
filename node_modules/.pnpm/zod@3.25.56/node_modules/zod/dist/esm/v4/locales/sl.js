import * as util from "../core/util.js";
const error = () => {
    const Sizable = {
        string: { unit: &quot;znakov&quot;, verb: &quot;imeti&quot; },
        file: { unit: &quot;bajtov&quot;, verb: &quot;imeti&quot; },
        array: { unit: &quot;elementov&quot;, verb: &quot;imeti&quot; },
        set: { unit: &quot;elementov&quot;, verb: &quot;imeti&quot; },
    };
    function getSizing(origin) {
        return Sizable[origin] ?? null;
    }
    const parsedType = (data) => {
        const t = typeof data;
        switch (t) {
            case &quot;number&quot;: {
                return Number.isNaN(data) ? &quot;NaN&quot; : &quot;število&quot;;
            }
            case &quot;object&quot;: {
                if (Array.isArray(data)) {
                    return &quot;tabela&quot;;
                }
                if (data === null) {
                    return &quot;null&quot;;
                }
                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
                    return data.constructor.name;
                }
            }
        }
        return t;
    };
    const Nouns = {
        regex: &quot;vnos&quot;,
        email: &quot;e-poštni naslov&quot;,
        url: &quot;URL&quot;,
        emoji: &quot;emoji&quot;,
        uuid: &quot;UUID&quot;,
        uuidv4: &quot;UUIDv4&quot;,
        uuidv6: &quot;UUIDv6&quot;,
        nanoid: &quot;nanoid&quot;,
        guid: &quot;GUID&quot;,
        cuid: &quot;cuid&quot;,
        cuid2: &quot;cuid2&quot;,
        ulid: &quot;ULID&quot;,
        xid: &quot;XID&quot;,
        ksuid: &quot;KSUID&quot;,
        datetime: &quot;ISO datum in čas&quot;,
        date: &quot;ISO datum&quot;,
        time: &quot;ISO čas&quot;,
        duration: &quot;ISO trajanje&quot;,
        ipv4: &quot;IPv4 naslov&quot;,
        ipv6: &quot;IPv6 naslov&quot;,
        cidrv4: &quot;obseg IPv4&quot;,
        cidrv6: &quot;obseg IPv6&quot;,
        base64: &quot;base64 kodiran niz&quot;,
        base64url: &quot;base64url kodiran niz&quot;,
        json_string: &quot;JSON niz&quot;,
        e164: &quot;E.164 številka&quot;,
        jwt: &quot;JWT&quot;,
        template_literal: &quot;vnos&quot;,
    };
    return (issue) => {
        switch (issue.code) {
            case &quot;invalid_type&quot;:
                return `Neveljaven vnos: pričakovano ${issue.expected}, prejeto ${parsedType(issue.input)}`;
            case &quot;invalid_value&quot;:
                if (issue.values.length === 1)
                    return `Neveljaven vnos: pričakovano ${util.stringifyPrimitive(issue.values[0])}`;
                return `Neveljavna možnost: pričakovano eno izmed ${util.joinValues(issue.values, &quot;|&quot;)}`;
            case &quot;too_big&quot;: {
                const adj = issue.inclusive ? &quot;<=" : "<";
                const sizing = getSizing(issue.origin);
                if (sizing)
                    return `Preveliko: pričakovano, da bo ${issue.origin ?? "vrednost"} imelo ${adj}${issue.maximum.toString()} ${sizing.unit ?? "elementov"}`;
                return `Preveliko: pričakovano, da bo ${issue.origin ?? "vrednost"} ${adj}${issue.maximum.toString()}`;
            }
            case "too_small": {
                const adj = issue.inclusive ? ">=" : ">";
                const sizing = getSizing(issue.origin);
                if (sizing) {
                    return `Premajhno: pričakovano, da bo ${issue.origin} imelo ${adj}${issue.minimum.toString()} ${sizing.unit}`;
                }
                return `Premajhno: pričakovano, da bo ${issue.origin} ${adj}${issue.minimum.toString()}`;
            }
            case "invalid_format": {
                const _issue = issue;
                if (_issue.format === "starts_with") {
                    return `Neveljaven niz: mora se začeti z "${_issue.prefix}"`;
                }
                if (_issue.format === "ends_with")
                    return `Neveljaven niz: mora se končati z "${_issue.suffix}"`;
                if (_issue.format === "includes")
                    return `Neveljaven niz: mora vsebovati "${_issue.includes}"`;
                if (_issue.format === "regex")
                    return `Neveljaven niz: mora ustrezati vzorcu ${_issue.pattern}`;
                return `Neveljaven ${Nouns[_issue.format] ?? issue.format}`;
            }
            case "not_multiple_of":
                return `Neveljavno število: mora biti večkratnik ${issue.divisor}`;
            case "unrecognized_keys":
                return `Neprepoznan${issue.keys.length > 1 ? "i ključi" : " ključ"}: ${util.joinValues(issue.keys, ", ")}`;
            case "invalid_key":
                return `Neveljaven ključ v ${issue.origin}`;
            case "invalid_union":
                return "Neveljaven vnos";
            case "invalid_element":
                return `Neveljavna vrednost v ${issue.origin}`;
            default:
                return "Neveljaven vnos";
        }
    };
};
export default function () {
    return {
        localeError: error(),
    };
}

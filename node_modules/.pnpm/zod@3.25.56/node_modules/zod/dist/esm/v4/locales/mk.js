import * as util from "../core/util.js";
const error = () => {
    const Sizable = {
        string: { unit: &quot;знаци&quot;, verb: &quot;да имаат&quot; },
        file: { unit: &quot;бајти&quot;, verb: &quot;да имаат&quot; },
        array: { unit: &quot;ставки&quot;, verb: &quot;да имаат&quot; },
        set: { unit: &quot;ставки&quot;, verb: &quot;да имаат&quot; },
    };
    function getSizing(origin) {
        return Sizable[origin] ?? null;
    }
    const parsedType = (data) => {
        const t = typeof data;
        switch (t) {
            case &quot;number&quot;: {
                return Number.isNaN(data) ? &quot;NaN&quot; : &quot;број&quot;;
            }
            case &quot;object&quot;: {
                if (Array.isArray(data)) {
                    return &quot;низа&quot;;
                }
                if (data === null) {
                    return &quot;null&quot;;
                }
                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
                    return data.constructor.name;
                }
            }
        }
        return t;
    };
    const Nouns = {
        regex: &quot;внес&quot;,
        email: &quot;адреса на е-пошта&quot;,
        url: &quot;URL&quot;,
        emoji: &quot;емоџи&quot;,
        uuid: &quot;UUID&quot;,
        uuidv4: &quot;UUIDv4&quot;,
        uuidv6: &quot;UUIDv6&quot;,
        nanoid: &quot;nanoid&quot;,
        guid: &quot;GUID&quot;,
        cuid: &quot;cuid&quot;,
        cuid2: &quot;cuid2&quot;,
        ulid: &quot;ULID&quot;,
        xid: &quot;XID&quot;,
        ksuid: &quot;KSUID&quot;,
        datetime: &quot;ISO датум и време&quot;,
        date: &quot;ISO датум&quot;,
        time: &quot;ISO време&quot;,
        duration: &quot;ISO времетраење&quot;,
        ipv4: &quot;IPv4 адреса&quot;,
        ipv6: &quot;IPv6 адреса&quot;,
        cidrv4: &quot;IPv4 опсег&quot;,
        cidrv6: &quot;IPv6 опсег&quot;,
        base64: &quot;base64-енкодирана низа&quot;,
        base64url: &quot;base64url-енкодирана низа&quot;,
        json_string: &quot;JSON низа&quot;,
        e164: &quot;E.164 број&quot;,
        jwt: &quot;JWT&quot;,
        template_literal: &quot;внес&quot;,
    };
    return (issue) => {
        switch (issue.code) {
            case &quot;invalid_type&quot;:
                return `Грешен внес: се очекува ${issue.expected}, примено ${parsedType(issue.input)}`;
            // return `Invalid input: expected ${issue.expected}, received ${util.getParsedType(issue.input)}`;
            case &quot;invalid_value&quot;:
                if (issue.values.length === 1)
                    return `Invalid input: expected ${util.stringifyPrimitive(issue.values[0])}`;
                return `Грешана опција: се очекува една ${util.joinValues(issue.values, &quot;|&quot;)}`;
            case &quot;too_big&quot;: {
                const adj = issue.inclusive ? &quot;<=" : "<";
                const sizing = getSizing(issue.origin);
                if (sizing)
                    return `Премногу голем: се очекува ${issue.origin ?? "вредноста"} да има ${adj}${issue.maximum.toString()} ${sizing.unit ?? "елементи"}`;
                return `Премногу голем: се очекува ${issue.origin ?? "вредноста"} да биде ${adj}${issue.maximum.toString()}`;
            }
            case "too_small": {
                const adj = issue.inclusive ? ">=" : ">";
                const sizing = getSizing(issue.origin);
                if (sizing) {
                    return `Премногу мал: се очекува ${issue.origin} да има ${adj}${issue.minimum.toString()} ${sizing.unit}`;
                }
                return `Премногу мал: се очекува ${issue.origin} да биде ${adj}${issue.minimum.toString()}`;
            }
            case "invalid_format": {
                const _issue = issue;
                if (_issue.format === "starts_with") {
                    return `Неважечка низа: мора да започнува со "${_issue.prefix}"`;
                }
                if (_issue.format === "ends_with")
                    return `Неважечка низа: мора да завршува со "${_issue.suffix}"`;
                if (_issue.format === "includes")
                    return `Неважечка низа: мора да вклучува "${_issue.includes}"`;
                if (_issue.format === "regex")
                    return `Неважечка низа: мора да одгоара на патернот ${_issue.pattern}`;
                return `Invalid ${Nouns[_issue.format] ?? issue.format}`;
            }
            case "not_multiple_of":
                return `Грешен број: мора да биде делив со ${issue.divisor}`;
            case "unrecognized_keys":
                return `${issue.keys.length > 1 ? "Непрепознаени клучеви" : "Непрепознаен клуч"}: ${util.joinValues(issue.keys, ", ")}`;
            case "invalid_key":
                return `Грешен клуч во ${issue.origin}`;
            case "invalid_union":
                return "Грешен внес";
            case "invalid_element":
                return `Грешна вредност во ${issue.origin}`;
            default:
                return `Грешен внес`;
        }
    };
};
export default function () {
    return {
        localeError: error(),
    };
}

import * as util from "../core/util.js";
const error = () => {
    const Sizable = {
        string: { unit: &quot;کاراکتر&quot;, verb: &quot;داشته باشد&quot; },
        file: { unit: &quot;بایت&quot;, verb: &quot;داشته باشد&quot; },
        array: { unit: &quot;آیتم&quot;, verb: &quot;داشته باشد&quot; },
        set: { unit: &quot;آیتم&quot;, verb: &quot;داشته باشد&quot; },
    };
    function getSizing(origin) {
        return Sizable[origin] ?? null;
    }
    const parsedType = (data) => {
        const t = typeof data;
        switch (t) {
            case &quot;number&quot;: {
                return Number.isNaN(data) ? &quot;NaN&quot; : &quot;عدد&quot;;
            }
            case &quot;object&quot;: {
                if (Array.isArray(data)) {
                    return &quot;آرایه&quot;;
                }
                if (data === null) {
                    return &quot;null&quot;;
                }
                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
                    return data.constructor.name;
                }
            }
        }
        return t;
    };
    const Nouns = {
        regex: &quot;ورودی&quot;,
        email: &quot;آدرس ایمیل&quot;,
        url: &quot;URL&quot;,
        emoji: &quot;ایموجی&quot;,
        uuid: &quot;UUID&quot;,
        uuidv4: &quot;UUIDv4&quot;,
        uuidv6: &quot;UUIDv6&quot;,
        nanoid: &quot;nanoid&quot;,
        guid: &quot;GUID&quot;,
        cuid: &quot;cuid&quot;,
        cuid2: &quot;cuid2&quot;,
        ulid: &quot;ULID&quot;,
        xid: &quot;XID&quot;,
        ksuid: &quot;KSUID&quot;,
        datetime: &quot;تاریخ و زمان ایزو&quot;,
        date: &quot;تاریخ ایزو&quot;,
        time: &quot;زمان ایزو&quot;,
        duration: &quot;مدت زمان ایزو&quot;,
        ipv4: &quot;IPv4 آدرس&quot;,
        ipv6: &quot;IPv6 آدرس&quot;,
        cidrv4: &quot;IPv4 دامنه&quot;,
        cidrv6: &quot;IPv6 دامنه&quot;,
        base64: &quot;base64-encoded رشته&quot;,
        base64url: &quot;base64url-encoded رشته&quot;,
        json_string: &quot;JSON رشته&quot;,
        e164: &quot;E.164 عدد&quot;,
        jwt: &quot;JWT&quot;,
        template_literal: &quot;ورودی&quot;,
    };
    return (issue) => {
        switch (issue.code) {
            case &quot;invalid_type&quot;:
                return `ورودی نامعتبر: می‌بایست ${issue.expected} می‌بود، ${parsedType(issue.input)} دریافت شد`;
            case &quot;invalid_value&quot;:
                if (issue.values.length === 1) {
                    return `ورودی نامعتبر: می‌بایست ${util.stringifyPrimitive(issue.values[0])} می‌بود`;
                }
                return `گزینه نامعتبر: می‌بایست یکی از ${util.joinValues(issue.values, &quot;|&quot;)} می‌بود`;
            case &quot;too_big&quot;: {
                const adj = issue.inclusive ? &quot;<=" : "<";
                const sizing = getSizing(issue.origin);
                if (sizing) {
                    return `خیلی بزرگ: ${issue.origin ?? "مقدار"} باید ${adj}${issue.maximum.toString()} ${sizing.unit ?? "عنصر"} باشد`;
                }
                return `خیلی بزرگ: ${issue.origin ?? "مقدار"} باید ${adj}${issue.maximum.toString()} باشد`;
            }
            case "too_small": {
                const adj = issue.inclusive ? ">=" : ">";
                const sizing = getSizing(issue.origin);
                if (sizing) {
                    return `خیلی کوچک: ${issue.origin} باید ${adj}${issue.minimum.toString()} ${sizing.unit} باشد`;
                }
                return `خیلی کوچک: ${issue.origin} باید ${adj}${issue.minimum.toString()} باشد`;
            }
            case "invalid_format": {
                const _issue = issue;
                if (_issue.format === "starts_with") {
                    return `رشته نامعتبر: باید با "${_issue.prefix}" شروع شود`;
                }
                if (_issue.format === "ends_with") {
                    return `رشته نامعتبر: باید با "${_issue.suffix}" تمام شود`;
                }
                if (_issue.format === "includes") {
                    return `رشته نامعتبر: باید شامل "${_issue.includes}" باشد`;
                }
                if (_issue.format === "regex") {
                    return `رشته نامعتبر: باید با الگوی ${_issue.pattern} مطابقت داشته باشد`;
                }
                return `${Nouns[_issue.format] ?? issue.format} نامعتبر`;
            }
            case "not_multiple_of":
                return `عدد نامعتبر: باید مضرب ${issue.divisor} باشد`;
            case "unrecognized_keys":
                return `کلید${issue.keys.length > 1 ? "های" : ""} ناشناس: ${util.joinValues(issue.keys, ", ")}`;
            case "invalid_key":
                return `کلید ناشناس در ${issue.origin}`;
            case "invalid_union":
                return `ورودی نامعتبر`;
            case "invalid_element":
                return `مقدار نامعتبر در ${issue.origin}`;
            default:
                return `ورودی نامعتبر`;
        }
    };
};
export default function () {
    return {
        localeError: error(),
    };
}

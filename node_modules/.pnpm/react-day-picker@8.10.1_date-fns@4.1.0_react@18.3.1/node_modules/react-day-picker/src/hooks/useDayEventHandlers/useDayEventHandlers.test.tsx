import { DayPickerProps } from 'DayPicker';

import { mockedContexts } from 'test/mockedContexts';
import { renderDayPickerHook } from 'test/render';

import { FocusContextValue } from 'contexts/Focus';
import {
  DayEventName,
  EventName,
  useDayEventHandlers
} from 'hooks/useDayEventHandlers';
import { ActiveModifiers } from 'types/Modifiers';

const today = new Date(2010, 5, 23);

function renderHook(
  date: Date,
  activeModifiers: ActiveModifiers,
  dayPickerProps?: DayPickerProps
) {
  return renderDayPickerHook(
    () => useDayEventHandlers(date, activeModifiers),
    dayPickerProps,
    mockedContexts
  );
}

const tests: [EventName, DayEventName][] = [
  [&apos;onClick&apos;, &apos;onDayClick&apos;],
  [&apos;onFocus&apos;, &apos;onDayFocus&apos;],
  [&apos;onBlur&apos;, &apos;onDayBlur&apos;],
  [&apos;onMouseEnter&apos;, &apos;onDayMouseEnter&apos;],
  [&apos;onMouseLeave&apos;, &apos;onDayMouseLeave&apos;],
  [&apos;onPointerEnter&apos;, &apos;onDayPointerEnter&apos;],
  [&apos;onPointerLeave&apos;, &apos;onDayPointerLeave&apos;],
  [&apos;onTouchEnd&apos;, &apos;onDayTouchEnd&apos;],
  [&apos;onTouchCancel&apos;, &apos;onDayTouchCancel&apos;],
  [&apos;onTouchMove&apos;, &apos;onDayTouchMove&apos;],
  [&apos;onTouchStart&apos;, &apos;onDayTouchStart&apos;],
  [&apos;onKeyUp&apos;, &apos;onDayKeyUp&apos;]
];

describe.each(tests)(&apos;when calling &quot;%s&quot;&apos;, (eventName, dayEventName) => {
  const activeModifiers: ActiveModifiers = {};
  const dayPickerProps = {
    onDayClick: jest.fn(),
    onDayFocus: jest.fn(),
    onDayBlur: jest.fn(),
    onDayMouseEnter: jest.fn(),
    onDayMouseLeave: jest.fn(),
    onDayPointerEnter: jest.fn(),
    onDayPointerLeave: jest.fn(),
    onDayTouchEnd: jest.fn(),
    onDayTouchCancel: jest.fn(),
    onDayTouchMove: jest.fn(),
    onDayTouchStart: jest.fn(),
    onDayKeyUp: jest.fn(),
    onDayKeyDown: jest.fn()
  };
  const mouseEvent = {} as React.MouseEvent<HTMLButtonElement, MouseEvent>;
  const date = today;
  test(`${dayEventName} should have been called`, () => {
    const result = renderHook(date, activeModifiers, dayPickerProps);
    //@ts-expect-error TOFIX: How to mock mouse event here?
    result.current[eventName]?.(mouseEvent);
    expect(dayPickerProps[dayEventName]).toHaveBeenCalledWith(
      date,
      activeModifiers,
      mouseEvent
    );
  });
});

describe.each<'single' | 'multiple' | 'range'>([&apos;single&apos;, &apos;multiple&apos;, &apos;range&apos;])(
  &apos;when calling &quot;onClick&quot; in &quot;%s&quot; selection mode&apos;,
  (mode) => {
    const activeModifiers: ActiveModifiers = {};
    const dayPickerProps = {
      mode,
      onDayClick: mockedContexts[mode].onDayClick
    };
    const mouseEvent = {} as React.MouseEvent<HTMLButtonElement, MouseEvent>;
    const date = today;
    test(`should have called &quot;onDayClick&quot; from the ${mode} context`, () => {
      const result = renderHook(date, activeModifiers, dayPickerProps);
      result.current.onClick?.(mouseEvent);
      expect(dayPickerProps.onDayClick).toHaveBeenCalledTimes(1);
    });
  }
);

describe(&apos;when calling &quot;onFocus&quot;&apos;, () => {
  const date = today;
  const activeModifiers: ActiveModifiers = {};
  const mouseEvent = {} as React.FocusEvent<HTMLButtonElement, Element>;
  test(&apos;should focus the date in the context&apos;, () => {
    const result = renderHook(date, activeModifiers);
    result.current.onFocus?.(mouseEvent);
    expect(mockedContexts.focus.focus).toHaveBeenCalledWith(date);
  });
});

describe(&apos;when calling &quot;onBlur&quot;&apos;, () => {
  const date = today;
  const activeModifiers: ActiveModifiers = {};
  const mouseEvent = {} as React.FocusEvent<HTMLButtonElement, Element>;
  test(&apos;should blur the date in the context&apos;, () => {
    const result = renderHook(date, activeModifiers);
    result.current.onBlur?.(mouseEvent);
    expect(mockedContexts.focus.blur).toHaveBeenCalled();
  });
});

describe(&apos;when calling &quot;onKeyDown&quot;&apos;, () => {
  const date = today;
  const activeModifiers: ActiveModifiers = {};

  const tests: [
    key: string,
    dir: string,
    shiftKey: boolean,
    expectedMethod: keyof FocusContextValue
  ][] = [
    [&apos;ArrowLeft&apos;, &apos;ltr&apos;, false, &apos;focusDayBefore&apos;],
    [&apos;ArrowLeft&apos;, &apos;rtl&apos;, false, &apos;focusDayAfter&apos;],
    [&apos;ArrowRight&apos;, &apos;ltr&apos;, false, &apos;focusDayAfter&apos;],
    [&apos;ArrowRight&apos;, &apos;ltr&apos;, false, &apos;focusDayBefore&apos;],
    [&apos;ArrowRight&apos;, &apos;ltr&apos;, false, &apos;focusDayAfter&apos;],
    [&apos;ArrowDown&apos;, &apos;ltr&apos;, false, &apos;focusWeekAfter&apos;],
    [&apos;ArrowUp&apos;, &apos;ltr&apos;, false, &apos;focusWeekBefore&apos;],
    [&apos;PageUp&apos;, &apos;ltr&apos;, true, &apos;focusYearBefore&apos;],
    [&apos;PageUp&apos;, &apos;ltr&apos;, false, &apos;focusMonthBefore&apos;],
    [&apos;PageDown&apos;, &apos;ltr&apos;, true, &apos;focusYearAfter&apos;],
    [&apos;PageDown&apos;, &apos;ltr&apos;, false, &apos;focusMonthAfter&apos;],
    [&apos;Home&apos;, &apos;ltr&apos;, false, &apos;focusStartOfWeek&apos;],
    [&apos;End&apos;, &apos;ltr&apos;, false, &apos;focusEndOfWeek&apos;]
  ];

  describe.each(tests)(
    &apos;when key is %s&apos;,
    (key, dir, shiftKey, expectedMethod) => {
      describe(`when text direction is &quot;${dir.toUpperCase()}&quot;`, () => {
        describe(`when the shiftKey is ${
          shiftKey ? &apos;&apos; : &apos;not&apos;
        } pressed`, () => {
          const keyboardEvent = {
            key,
            shiftKey
          } as React.KeyboardEvent<HTMLButtonElement>;
          keyboardEvent.preventDefault = jest.fn();
          keyboardEvent.stopPropagation = jest.fn();

          beforeEach(() => {
            const result = renderHook(date, activeModifiers, { dir });
            result.current.onKeyDown?.(keyboardEvent);
          });
          test(`should call ${expectedMethod}`, () => {
            expect(mockedContexts.focus[expectedMethod]).toHaveBeenCalledWith();
          });
          test(`should prevent the default event`, () => {
            expect(keyboardEvent.preventDefault).toHaveBeenCalledWith();
          });
          test(`should stop the event propagation`, () => {
            expect(keyboardEvent.preventDefault).toHaveBeenCalledWith();
          });
        });
      });
    }
  );
});

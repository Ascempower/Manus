import { screen } from '@testing-library/react';
import { DayPickerProps } from 'DayPicker';

import { customRender } from 'test/render/customRender';

import { CustomComponents } from 'types/DayPickerBase';

import { Row, RowProps } from './Row';

function setup(props: RowProps, dayPickerProps?: DayPickerProps) {
  customRender(<Row {...props} />, dayPickerProps);
}

const props: RowProps = {
  displayMonth: new Date(2020, 1),
  weekNumber: 4,
  dates: [new Date(2020, 1, 1), new Date(2020, 1, 2), new Date(2020, 1, 3)]
};

describe(&apos;when &quot;showWeekNumber&quot; is set&apos;, () => {
  const dayPickerProps = {
    showWeekNumber: true,
    classNames: { cell: &apos;cell&apos; },
    styles: { cell: { background: &apos;red&apos; } }
  };
  beforeEach(() => {
    setup(props, dayPickerProps);
  });
  test(&apos;should display the cell with the week number&apos;, () => {
    const cell = screen.getByRole(&apos;cell&apos;, { name: `${props.weekNumber}` });
    expect(cell).toBeInTheDocument();
  });
  test(&apos;the cell should have the &quot;cell&quot; class name&apos;, () => {
    const cell = screen.getByRole(&apos;cell&apos;, { name: `${props.weekNumber}` });
    expect(cell).toHaveClass(dayPickerProps.classNames.cell);
  });
  test(&apos;the cell should have the &quot;cell&quot; style&apos;, () => {
    const cell = screen.getByRole(&apos;cell&apos;, { name: `${props.weekNumber}` });
    expect(cell).toHaveStyle(dayPickerProps.styles.cell);
  });
});

describe(&apos;when using a custom Day component&apos;, () => {
  const components: CustomComponents = {
    Day: () => <div>CustomDay</div>
  };
  const dayPickerProps = { components };
  beforeEach(() => {
    setup(props, dayPickerProps);
  });
  test(&apos;it should render the custom component instead&apos;, () => {
    expect(screen.getAllByText(&apos;CustomDay&apos;)).toHaveLength(props.dates.length);
  });
});

describe(&apos;when using a custom WeekNumber component&apos;, () => {
  const components: CustomComponents = {
    WeekNumber: () => <div>WeekNumber</div>
  };
  const dayPickerProps: DayPickerProps = { components, showWeekNumber: true };
  beforeEach(() => {
    setup(props, dayPickerProps);
  });
  test('it should render the custom component instead', () => {
    expect(screen.getByText('WeekNumber')).toBeInTheDocument();
  });
});

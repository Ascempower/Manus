(() => {
var _window$dateFns;function _typeof(o) {&quot;@babel/helpers - typeof&quot;;return _typeof = &quot;function&quot; == typeof Symbol && &quot;symbol&quot; == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && &quot;function&quot; == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? &quot;symbol&quot; : typeof o;}, _typeof(o);}function ownKeys(e, r) {var t = Object.keys(e);if (Object.getOwnPropertySymbols) {var o = Object.getOwnPropertySymbols(e);r && (o = o.filter(function (r) {return Object.getOwnPropertyDescriptor(e, r).enumerable;})), t.push.apply(t, o);}return t;}function _objectSpread(e) {for (var r = 1; r < arguments.length; r++) {var t = null != arguments[r] ? arguments[r] : {};r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {_defineProperty(e, r, t[r]);}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));});}return e;}function _defineProperty(obj, key, value) {key = _toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : String(i);}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);}var __defProp = Object.defineProperty;
var __export = function __export(target, all) {
  for (var name in all)
  __defProp(target, name, {
    get: all[name],
    enumerable: true,
    configurable: true,
    set: function set(newValue) {return all[name] = function () {return newValue;};}
  });
};

// lib/locale/cy/_lib/formatDistance.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "llai na eiliad",
    other: "llai na {{count}} eiliad"
  },
  xSeconds: {
    one: "1 eiliad",
    other: "{{count}} eiliad"
  },
  halfAMinute: "hanner munud",
  lessThanXMinutes: {
    one: "llai na munud",
    two: "llai na 2 funud",
    other: "llai na {{count}} munud"
  },
  xMinutes: {
    one: "1 munud",
    two: "2 funud",
    other: "{{count}} munud"
  },
  aboutXHours: {
    one: "tua 1 awr",
    other: "tua {{count}} awr"
  },
  xHours: {
    one: "1 awr",
    other: "{{count}} awr"
  },
  xDays: {
    one: "1 diwrnod",
    two: "2 ddiwrnod",
    other: "{{count}} diwrnod"
  },
  aboutXWeeks: {
    one: "tua 1 wythnos",
    two: "tua pythefnos",
    other: "tua {{count}} wythnos"
  },
  xWeeks: {
    one: "1 wythnos",
    two: "pythefnos",
    other: "{{count}} wythnos"
  },
  aboutXMonths: {
    one: "tua 1 mis",
    two: "tua 2 fis",
    other: "tua {{count}} mis"
  },
  xMonths: {
    one: "1 mis",
    two: "2 fis",
    other: "{{count}} mis"
  },
  aboutXYears: {
    one: "tua 1 flwyddyn",
    two: "tua 2 flynedd",
    other: "tua {{count}} mlynedd"
  },
  xYears: {
    one: "1 flwyddyn",
    two: "2 flynedd",
    other: "{{count}} mlynedd"
  },
  overXYears: {
    one: "dros 1 flwyddyn",
    two: "dros 2 flynedd",
    other: "dros {{count}} mlynedd"
  },
  almostXYears: {
    one: "bron 1 flwyddyn",
    two: "bron 2 flynedd",
    other: "bron {{count}} mlynedd"
  }
};
var formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2 && !!tokenValue.two) {
    result = tokenValue.two;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return &quot;mewn &quot; + result;
    } else {
      return result + &quot; yn \xF4l&quot;;
    }
  }
  return result;
};

// lib/locale/_lib/buildFormatLongFn.js
function buildFormatLongFn(args) {
  return function () {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

// lib/locale/cy/_lib/formatLong.js
var dateFormats = {
  full: &quot;EEEE, d MMMM yyyy&quot;,
  long: &quot;d MMMM yyyy&quot;,
  medium: &quot;d MMM yyyy&quot;,
  short: &quot;dd/MM/yyyy&quot;
};
var timeFormats = {
  full: &quot;h:mm:ss a zzzz&quot;,
  long: &quot;h:mm:ss a z&quot;,
  medium: &quot;h:mm:ss a&quot;,
  short: &quot;h:mm a&quot;
};
var dateTimeFormats = {
  full: &quot;{{date}} &apos;am&apos; {{time}}&quot;,
  long: &quot;{{date}} &apos;am&apos; {{time}}&quot;,
  medium: &quot;{{date}}, {{time}}&quot;,
  short: &quot;{{date}}, {{time}}&quot;
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: &quot;full&quot;
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: &quot;full&quot;
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: &quot;full&quot;
  })
};

// lib/locale/cy/_lib/formatRelative.js
var formatRelativeLocale = {
  lastWeek: &quot;eeee &apos;diwethaf am&apos; p&quot;,
  yesterday: &quot;&apos;ddoe am&apos; p&quot;,
  today: &quot;&apos;heddiw am&apos; p&quot;,
  tomorrow: &quot;&apos;yfory am&apos; p&quot;,
  nextWeek: &quot;eeee &apos;am&apos; p&quot;,
  other: &quot;P&quot;
};
var formatRelative = function formatRelative(token, _date, _baseDate, _options) {return formatRelativeLocale[token];};

// lib/locale/_lib/buildLocalizeFn.js
function buildLocalizeFn(args) {
  return function (value, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : &quot;standalone&quot;;
    var valuesArray;
    if (context === &quot;formatting&quot; && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(value) : value;
    return valuesArray[index];
  };
}

// lib/locale/cy/_lib/localize.js
var eraValues = {
  narrow: [&quot;C&quot;, &quot;O&quot;],
  abbreviated: [&quot;CC&quot;, &quot;OC&quot;],
  wide: [&quot;Cyn Crist&quot;, &quot;Ar \xF4l Crist&quot;]
};
var quarterValues = {
  narrow: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;],
  abbreviated: [&quot;Ch1&quot;, &quot;Ch2&quot;, &quot;Ch3&quot;, &quot;Ch4&quot;],
  wide: [&quot;Chwarter 1af&quot;, &quot;2ail chwarter&quot;, &quot;3ydd chwarter&quot;, &quot;4ydd chwarter&quot;]
};
var monthValues = {
  narrow: [&quot;I&quot;, &quot;Ch&quot;, &quot;Ma&quot;, &quot;E&quot;, &quot;Mi&quot;, &quot;Me&quot;, &quot;G&quot;, &quot;A&quot;, &quot;Md&quot;, &quot;H&quot;, &quot;T&quot;, &quot;Rh&quot;],
  abbreviated: [
  &quot;Ion&quot;,
  &quot;Chwe&quot;,
  &quot;Maw&quot;,
  &quot;Ebr&quot;,
  &quot;Mai&quot;,
  &quot;Meh&quot;,
  &quot;Gor&quot;,
  &quot;Aws&quot;,
  &quot;Med&quot;,
  &quot;Hyd&quot;,
  &quot;Tach&quot;,
  &quot;Rhag&quot;],

  wide: [
  &quot;Ionawr&quot;,
  &quot;Chwefror&quot;,
  &quot;Mawrth&quot;,
  &quot;Ebrill&quot;,
  &quot;Mai&quot;,
  &quot;Mehefin&quot;,
  &quot;Gorffennaf&quot;,
  &quot;Awst&quot;,
  &quot;Medi&quot;,
  &quot;Hydref&quot;,
  &quot;Tachwedd&quot;,
  &quot;Rhagfyr&quot;]

};
var dayValues = {
  narrow: [&quot;S&quot;, &quot;Ll&quot;, &quot;M&quot;, &quot;M&quot;, &quot;I&quot;, &quot;G&quot;, &quot;S&quot;],
  short: [&quot;Su&quot;, &quot;Ll&quot;, &quot;Ma&quot;, &quot;Me&quot;, &quot;Ia&quot;, &quot;Gw&quot;, &quot;Sa&quot;],
  abbreviated: [&quot;Sul&quot;, &quot;Llun&quot;, &quot;Maw&quot;, &quot;Mer&quot;, &quot;Iau&quot;, &quot;Gwe&quot;, &quot;Sad&quot;],
  wide: [
  &quot;dydd Sul&quot;,
  &quot;dydd Llun&quot;,
  &quot;dydd Mawrth&quot;,
  &quot;dydd Mercher&quot;,
  &quot;dydd Iau&quot;,
  &quot;dydd Gwener&quot;,
  &quot;dydd Sadwrn&quot;]

};
var dayPeriodValues = {
  narrow: {
    am: &quot;b&quot;,
    pm: &quot;h&quot;,
    midnight: &quot;hn&quot;,
    noon: &quot;hd&quot;,
    morning: &quot;bore&quot;,
    afternoon: &quot;prynhawn&quot;,
    evening: &quot;gyda&apos;r nos&quot;,
    night: &quot;nos&quot;
  },
  abbreviated: {
    am: &quot;yb&quot;,
    pm: &quot;yh&quot;,
    midnight: &quot;hanner nos&quot;,
    noon: &quot;hanner dydd&quot;,
    morning: &quot;bore&quot;,
    afternoon: &quot;prynhawn&quot;,
    evening: &quot;gyda&apos;r nos&quot;,
    night: &quot;nos&quot;
  },
  wide: {
    am: &quot;y.b.&quot;,
    pm: &quot;y.h.&quot;,
    midnight: &quot;hanner nos&quot;,
    noon: &quot;hanner dydd&quot;,
    morning: &quot;bore&quot;,
    afternoon: &quot;prynhawn&quot;,
    evening: &quot;gyda&apos;r nos&quot;,
    night: &quot;nos&quot;
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: &quot;b&quot;,
    pm: &quot;h&quot;,
    midnight: &quot;hn&quot;,
    noon: &quot;hd&quot;,
    morning: &quot;yn y bore&quot;,
    afternoon: &quot;yn y prynhawn&quot;,
    evening: &quot;gyda&apos;r nos&quot;,
    night: &quot;yn y nos&quot;
  },
  abbreviated: {
    am: &quot;yb&quot;,
    pm: &quot;yh&quot;,
    midnight: &quot;hanner nos&quot;,
    noon: &quot;hanner dydd&quot;,
    morning: &quot;yn y bore&quot;,
    afternoon: &quot;yn y prynhawn&quot;,
    evening: &quot;gyda&apos;r nos&quot;,
    night: &quot;yn y nos&quot;
  },
  wide: {
    am: &quot;y.b.&quot;,
    pm: &quot;y.h.&quot;,
    midnight: &quot;hanner nos&quot;,
    noon: &quot;hanner dydd&quot;,
    morning: &quot;yn y bore&quot;,
    afternoon: &quot;yn y prynhawn&quot;,
    evening: &quot;gyda&apos;r nos&quot;,
    night: &quot;yn y nos&quot;
  }
};
var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  if (number < 20) {
    switch (number) {
      case 0:
        return number + "fed";
      case 1:
        return number + "af";
      case 2:
        return number + "ail";
      case 3:
      case 4:
        return number + "ydd";
      case 5:
      case 6:
        return number + "ed";
      case 7:
      case 8:
      case 9:
      case 10:
      case 12:
      case 15:
      case 18:
        return number + "fed";
      case 11:
      case 13:
      case 14:
      case 16:
      case 17:
      case 19:
        return number + "eg";
    }
  } else if (number >= 50 && number <= 60 || number === 80 || number >= 100) {
    return number + &quot;fed&quot;;
  }
  return number + &quot;ain&quot;;
};
var localize = {
  ordinalNumber: ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: &quot;wide&quot;
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: &quot;wide&quot;,
    argumentCallback: function argumentCallback(quarter) {return quarter - 1;}
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: &quot;wide&quot;
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: &quot;wide&quot;
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: &quot;wide&quot;,
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: &quot;wide&quot;
  })
};

// lib/locale/_lib/buildMatchFn.js
function buildMatchFn(args) {
  return function (string) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {return pattern.test(matchedString);}) : findKey(parsePatterns, function (pattern) {return pattern.test(matchedString);});
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return { value: value, rest: rest };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {
      return key;
    }
  }
  return;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return;
}

// lib/locale/_lib/buildMatchPatternFn.js
function buildMatchPatternFn(args) {
  return function (string) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
    return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
    return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return { value: value, rest: rest };
  };
}

// lib/locale/cy/_lib/match.js
var matchOrdinalNumberPattern = /^(\d+)(af|ail|ydd|ed|fed|eg|ain)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(c|o)/i,
  abbreviated: /^(c\.?\s?c\.?|o\.?\s?c\.?)/i,
  wide: /^(cyn christ|ar ôl crist|ar ol crist)/i
};
var parseEraPatterns = {
  wide: [/^c/i, /^(ar ôl crist|ar ol crist)/i],
  any: [/^c/i, /^o/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^ch[1234]/i,
  wide: /^(chwarter 1af)|([234](ail|ydd)? chwarter)/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^(i|ch|m|e|g|a|h|t|rh)/i,
  abbreviated: /^(ion|chwe|maw|ebr|mai|meh|gor|aws|med|hyd|tach|rhag)/i,
  wide: /^(ionawr|chwefror|mawrth|ebrill|mai|mehefin|gorffennaf|awst|medi|hydref|tachwedd|rhagfyr)/i
};
var parseMonthPatterns = {
  narrow: [
  /^i/i,
  /^ch/i,
  /^m/i,
  /^e/i,
  /^m/i,
  /^m/i,
  /^g/i,
  /^a/i,
  /^m/i,
  /^h/i,
  /^t/i,
  /^rh/i],

  any: [
  /^io/i,
  /^ch/i,
  /^maw/i,
  /^e/i,
  /^mai/i,
  /^meh/i,
  /^g/i,
  /^a/i,
  /^med/i,
  /^h/i,
  /^t/i,
  /^rh/i]

};
var matchDayPatterns = {
  narrow: /^(s|ll|m|i|g)/i,
  short: /^(su|ll|ma|me|ia|gw|sa)/i,
  abbreviated: /^(sul|llun|maw|mer|iau|gwe|sad)/i,
  wide: /^dydd (sul|llun|mawrth|mercher|iau|gwener|sadwrn)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^ll/i, /^m/i, /^m/i, /^i/i, /^g/i, /^s/i],
  wide: [
  /^dydd su/i,
  /^dydd ll/i,
  /^dydd ma/i,
  /^dydd me/i,
  /^dydd i/i,
  /^dydd g/i,
  /^dydd sa/i],

  any: [/^su/i, /^ll/i, /^ma/i, /^me/i, /^i/i, /^g/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(b|h|hn|hd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i,
  any: /^(y\.?\s?[bh]\.?|hanner nos|hanner dydd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^b|(y\.?\s?b\.?)/i,
    pm: /^h|(y\.?\s?h\.?)|(yr hwyr)/i,
    midnight: /^hn|hanner nos/i,
    noon: /^hd|hanner dydd/i,
    morning: /bore/i,
    afternoon: /prynhawn/i,
    evening: /^gyda'r nos$/i,
    night: /blah/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {return parseInt(value, 10);}
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback(index) {return index + 1;}
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};

// lib/locale/cy.js
var cy = {
  code: "cy",
  formatDistance: formatDistance,
  formatLong: formatLong,
  formatRelative: formatRelative,
  localize: localize,
  match: match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};

// lib/locale/cy/cdn.js
window.dateFns = _objectSpread(_objectSpread({},
window.dateFns), {}, {
  locale: _objectSpread(_objectSpread({}, (_window$dateFns =
  window.dateFns) === null || _window$dateFns === void 0 ? void 0 : _window$dateFns.locale), {}, {
    cy: cy }) });



//# debugId=78B9F066BE36C66D64756E2164756E21

//# sourceMappingURL=cdn.js.map
})();
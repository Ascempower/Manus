(() => {
var _window$dateFns;function _typeof(o) {&quot;@babel/helpers - typeof&quot;;return _typeof = &quot;function&quot; == typeof Symbol && &quot;symbol&quot; == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && &quot;function&quot; == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? &quot;symbol&quot; : typeof o;}, _typeof(o);}function ownKeys(e, r) {var t = Object.keys(e);if (Object.getOwnPropertySymbols) {var o = Object.getOwnPropertySymbols(e);r && (o = o.filter(function (r) {return Object.getOwnPropertyDescriptor(e, r).enumerable;})), t.push.apply(t, o);}return t;}function _objectSpread(e) {for (var r = 1; r < arguments.length; r++) {var t = null != arguments[r] ? arguments[r] : {};r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {_defineProperty(e, r, t[r]);}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));});}return e;}function _defineProperty(obj, key, value) {key = _toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : String(i);}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);}var __defProp = Object.defineProperty;
var __export = function __export(target, all) {
  for (var name in all)
  __defProp(target, name, {
    get: all[name],
    enumerable: true,
    configurable: true,
    set: function set(newValue) {return all[name] = function () {return newValue;};}
  });
};

// lib/locale/pt-BR/_lib/formatDistance.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "menos de um segundo",
    other: "menos de {{count}} segundos"
  },
  xSeconds: {
    one: "1 segundo",
    other: "{{count}} segundos"
  },
  halfAMinute: "meio minuto",
  lessThanXMinutes: {
    one: "menos de um minuto",
    other: "menos de {{count}} minutos"
  },
  xMinutes: {
    one: "1 minuto",
    other: "{{count}} minutos"
  },
  aboutXHours: {
    one: "cerca de 1 hora",
    other: "cerca de {{count}} horas"
  },
  xHours: {
    one: "1 hora",
    other: "{{count}} horas"
  },
  xDays: {
    one: "1 dia",
    other: "{{count}} dias"
  },
  aboutXWeeks: {
    one: "cerca de 1 semana",
    other: "cerca de {{count}} semanas"
  },
  xWeeks: {
    one: "1 semana",
    other: "{{count}} semanas"
  },
  aboutXMonths: {
    one: "cerca de 1 m\xEAs",
    other: "cerca de {{count}} meses"
  },
  xMonths: {
    one: "1 m\xEAs",
    other: "{{count}} meses"
  },
  aboutXYears: {
    one: "cerca de 1 ano",
    other: "cerca de {{count}} anos"
  },
  xYears: {
    one: "1 ano",
    other: "{{count}} anos"
  },
  overXYears: {
    one: "mais de 1 ano",
    other: "mais de {{count}} anos"
  },
  almostXYears: {
    one: "quase 1 ano",
    other: "quase {{count}} anos"
  }
};
var formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return &quot;em &quot; + result;
    } else {
      return &quot;h\xE1 &quot; + result;
    }
  }
  return result;
};

// lib/locale/_lib/buildFormatLongFn.js
function buildFormatLongFn(args) {
  return function () {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

// lib/locale/pt-BR/_lib/formatLong.js
var dateFormats = {
  full: &quot;EEEE, d &apos;de&apos; MMMM &apos;de&apos; y&quot;,
  long: &quot;d &apos;de&apos; MMMM &apos;de&apos; y&quot;,
  medium: &quot;d MMM y&quot;,
  short: &quot;dd/MM/yyyy&quot;
};
var timeFormats = {
  full: &quot;HH:mm:ss zzzz&quot;,
  long: &quot;HH:mm:ss z&quot;,
  medium: &quot;HH:mm:ss&quot;,
  short: &quot;HH:mm&quot;
};
var dateTimeFormats = {
  full: &quot;{{date}} &apos;\xE0s&apos; {{time}}&quot;,
  long: &quot;{{date}} &apos;\xE0s&apos; {{time}}&quot;,
  medium: &quot;{{date}}, {{time}}&quot;,
  short: &quot;{{date}}, {{time}}&quot;
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: &quot;full&quot;
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: &quot;full&quot;
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: &quot;full&quot;
  })
};

// lib/locale/pt-BR/_lib/formatRelative.js
var formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    var weekday = date.getDay();
    var last = weekday === 0 || weekday === 6 ? &quot;\xFAltimo&quot; : &quot;\xFAltima&quot;;
    return &quot;&apos;&quot; + last + &quot;&apos; eeee &apos;\xE0s&apos; p&quot;;
  },
  yesterday: &quot;&apos;ontem \xE0s&apos; p&quot;,
  today: &quot;&apos;hoje \xE0s&apos; p&quot;,
  tomorrow: &quot;&apos;amanh\xE3 \xE0s&apos; p&quot;,
  nextWeek: &quot;eeee &apos;\xE0s&apos; p&quot;,
  other: &quot;P&quot;
};
var formatRelative = function formatRelative(token, date, _baseDate, _options) {
  var format = formatRelativeLocale[token];
  if (typeof format === &quot;function&quot;) {
    return format(date);
  }
  return format;
};

// lib/locale/_lib/buildLocalizeFn.js
function buildLocalizeFn(args) {
  return function (value, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : &quot;standalone&quot;;
    var valuesArray;
    if (context === &quot;formatting&quot; && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(value) : value;
    return valuesArray[index];
  };
}

// lib/locale/pt-BR/_lib/localize.js
var eraValues = {
  narrow: [&quot;AC&quot;, &quot;DC&quot;],
  abbreviated: [&quot;AC&quot;, &quot;DC&quot;],
  wide: [&quot;antes de cristo&quot;, &quot;depois de cristo&quot;]
};
var quarterValues = {
  narrow: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;],
  abbreviated: [&quot;T1&quot;, &quot;T2&quot;, &quot;T3&quot;, &quot;T4&quot;],
  wide: [&quot;1\xBA trimestre&quot;, &quot;2\xBA trimestre&quot;, &quot;3\xBA trimestre&quot;, &quot;4\xBA trimestre&quot;]
};
var monthValues = {
  narrow: [&quot;j&quot;, &quot;f&quot;, &quot;m&quot;, &quot;a&quot;, &quot;m&quot;, &quot;j&quot;, &quot;j&quot;, &quot;a&quot;, &quot;s&quot;, &quot;o&quot;, &quot;n&quot;, &quot;d&quot;],
  abbreviated: [
  &quot;jan&quot;,
  &quot;fev&quot;,
  &quot;mar&quot;,
  &quot;abr&quot;,
  &quot;mai&quot;,
  &quot;jun&quot;,
  &quot;jul&quot;,
  &quot;ago&quot;,
  &quot;set&quot;,
  &quot;out&quot;,
  &quot;nov&quot;,
  &quot;dez&quot;],

  wide: [
  &quot;janeiro&quot;,
  &quot;fevereiro&quot;,
  &quot;mar\xE7o&quot;,
  &quot;abril&quot;,
  &quot;maio&quot;,
  &quot;junho&quot;,
  &quot;julho&quot;,
  &quot;agosto&quot;,
  &quot;setembro&quot;,
  &quot;outubro&quot;,
  &quot;novembro&quot;,
  &quot;dezembro&quot;]

};
var dayValues = {
  narrow: [&quot;D&quot;, &quot;S&quot;, &quot;T&quot;, &quot;Q&quot;, &quot;Q&quot;, &quot;S&quot;, &quot;S&quot;],
  short: [&quot;dom&quot;, &quot;seg&quot;, &quot;ter&quot;, &quot;qua&quot;, &quot;qui&quot;, &quot;sex&quot;, &quot;sab&quot;],
  abbreviated: [
  &quot;domingo&quot;,
  &quot;segunda&quot;,
  &quot;ter\xE7a&quot;,
  &quot;quarta&quot;,
  &quot;quinta&quot;,
  &quot;sexta&quot;,
  &quot;s\xE1bado&quot;],

  wide: [
  &quot;domingo&quot;,
  &quot;segunda-feira&quot;,
  &quot;ter\xE7a-feira&quot;,
  &quot;quarta-feira&quot;,
  &quot;quinta-feira&quot;,
  &quot;sexta-feira&quot;,
  &quot;s\xE1bado&quot;]

};
var dayPeriodValues = {
  narrow: {
    am: &quot;a&quot;,
    pm: &quot;p&quot;,
    midnight: &quot;mn&quot;,
    noon: &quot;md&quot;,
    morning: &quot;manh\xE3&quot;,
    afternoon: &quot;tarde&quot;,
    evening: &quot;tarde&quot;,
    night: &quot;noite&quot;
  },
  abbreviated: {
    am: &quot;AM&quot;,
    pm: &quot;PM&quot;,
    midnight: &quot;meia-noite&quot;,
    noon: &quot;meio-dia&quot;,
    morning: &quot;manh\xE3&quot;,
    afternoon: &quot;tarde&quot;,
    evening: &quot;tarde&quot;,
    night: &quot;noite&quot;
  },
  wide: {
    am: &quot;a.m.&quot;,
    pm: &quot;p.m.&quot;,
    midnight: &quot;meia-noite&quot;,
    noon: &quot;meio-dia&quot;,
    morning: &quot;manh\xE3&quot;,
    afternoon: &quot;tarde&quot;,
    evening: &quot;tarde&quot;,
    night: &quot;noite&quot;
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: &quot;a&quot;,
    pm: &quot;p&quot;,
    midnight: &quot;mn&quot;,
    noon: &quot;md&quot;,
    morning: &quot;da manh\xE3&quot;,
    afternoon: &quot;da tarde&quot;,
    evening: &quot;da tarde&quot;,
    night: &quot;da noite&quot;
  },
  abbreviated: {
    am: &quot;AM&quot;,
    pm: &quot;PM&quot;,
    midnight: &quot;meia-noite&quot;,
    noon: &quot;meio-dia&quot;,
    morning: &quot;da manh\xE3&quot;,
    afternoon: &quot;da tarde&quot;,
    evening: &quot;da tarde&quot;,
    night: &quot;da noite&quot;
  },
  wide: {
    am: &quot;a.m.&quot;,
    pm: &quot;p.m.&quot;,
    midnight: &quot;meia-noite&quot;,
    noon: &quot;meio-dia&quot;,
    morning: &quot;da manh\xE3&quot;,
    afternoon: &quot;da tarde&quot;,
    evening: &quot;da tarde&quot;,
    night: &quot;da noite&quot;
  }
};
var ordinalNumber = function ordinalNumber(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  if ((options === null || options === void 0 ? void 0 : options.unit) === &quot;week&quot;) {
    return number + &quot;\xAA&quot;;
  }
  return number + &quot;\xBA&quot;;
};
var localize = {
  ordinalNumber: ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: &quot;wide&quot;
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: &quot;wide&quot;,
    argumentCallback: function argumentCallback(quarter) {return quarter - 1;}
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: &quot;wide&quot;
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: &quot;wide&quot;
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: &quot;wide&quot;,
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: &quot;wide&quot;
  })
};

// lib/locale/_lib/buildMatchFn.js
function buildMatchFn(args) {
  return function (string) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {return pattern.test(matchedString);}) : findKey(parsePatterns, function (pattern) {return pattern.test(matchedString);});
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return { value: value, rest: rest };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {
      return key;
    }
  }
  return;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return;
}

// lib/locale/_lib/buildMatchPatternFn.js
function buildMatchPatternFn(args) {
  return function (string) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
    return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
    return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return { value: value, rest: rest };
  };
}

// lib/locale/pt-BR/_lib/match.js
var matchOrdinalNumberPattern = /^(\d+)[ºªo]?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|d\.?\s?c\.?)/i,
  wide: /^(antes de cristo|depois de cristo)/i
};
var parseEraPatterns = {
  any: [/^ac/i, /^dc/i],
  wide: [/^antes de cristo/i, /^depois de cristo/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](º)? trimestre/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmajsond]/i,
  abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
  wide: /^(janeiro|fevereiro|março|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
};
var parseMonthPatterns = {
  narrow: [
  /^j/i,
  /^f/i,
  /^m/i,
  /^a/i,
  /^m/i,
  /^j/i,
  /^j/i,
  /^a/i,
  /^s/i,
  /^o/i,
  /^n/i,
  /^d/i],

  any: [
  /^ja/i,
  /^fev/i,
  /^mar/i,
  /^abr/i,
  /^mai/i,
  /^jun/i,
  /^jul/i,
  /^ago/i,
  /^set/i,
  /^out/i,
  /^nov/i,
  /^dez/i]

};
var matchDayPatterns = {
  narrow: /^(dom|[23456]ª?|s[aá]b)/i,
  short: /^(dom|[23456]ª?|s[aá]b)/i,
  abbreviated: /^(dom|seg|ter|qua|qui|sex|s[aá]b)/i,
  wide: /^(domingo|(segunda|ter[cç]a|quarta|quinta|sexta)([- ]feira)?|s[aá]bado)/i
};
var parseDayPatterns = {
  short: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[aá]/i],
  narrow: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[aá]/i],
  any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[aá]b/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mn|md|(da) (manhã|tarde|noite))/i,
  any: /^([ap]\.?\s?m\.?|meia[-\s]noite|meio[-\s]dia|(da) (manhã|tarde|noite))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn|^meia[-\s]noite/i,
    noon: /^md|^meio[-\s]dia/i,
    morning: /manhã/i,
    afternoon: /tarde/i,
    evening: /tarde/i,
    night: /noite/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {return parseInt(value, 10);}
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback(index) {return index + 1;}
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};

// lib/locale/pt-BR.js
var ptBR = {
  code: "pt-BR",
  formatDistance: formatDistance,
  formatLong: formatLong,
  formatRelative: formatRelative,
  localize: localize,
  match: match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};

// lib/locale/pt-BR/cdn.js
window.dateFns = _objectSpread(_objectSpread({},
window.dateFns), {}, {
  locale: _objectSpread(_objectSpread({}, (_window$dateFns =
  window.dateFns) === null || _window$dateFns === void 0 ? void 0 : _window$dateFns.locale), {}, {
    ptBR: ptBR }) });



//# debugId=34A505ED4FAA16FE64756E2164756E21

//# sourceMappingURL=cdn.js.map
})();
const formatDistanceLocale = {
  lessThanXSeconds: {
    regular: {
      one: "1 секундтан аз",
      singularNominative: "{{count}} секундтан аз",
      singularGenitive: "{{count}} секундтан аз",
      pluralGenitive: "{{count}} секундтан аз",
    },
    future: {
      one: "бір секундтан кейін",
      singularNominative: "{{count}} секундтан кейін",
      singularGenitive: "{{count}} секундтан кейін",
      pluralGenitive: "{{count}} секундтан кейін",
    },
  },

  xSeconds: {
    regular: {
      singularNominative: "{{count}} секунд",
      singularGenitive: "{{count}} секунд",
      pluralGenitive: "{{count}} секунд",
    },
    past: {
      singularNominative: "{{count}} секунд бұрын",
      singularGenitive: "{{count}} секунд бұрын",
      pluralGenitive: "{{count}} секунд бұрын",
    },
    future: {
      singularNominative: "{{count}} секундтан кейін",
      singularGenitive: "{{count}} секундтан кейін",
      pluralGenitive: "{{count}} секундтан кейін",
    },
  },

  halfAMinute: (options) => {
    if (options?.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        return &quot;жарты минут ішінде&quot;;
      } else {
        return &quot;жарты минут бұрын&quot;;
      }
    }

    return &quot;жарты минут&quot;;
  },

  lessThanXMinutes: {
    regular: {
      one: &quot;1 минуттан аз&quot;,
      singularNominative: &quot;{{count}} минуттан аз&quot;,
      singularGenitive: &quot;{{count}} минуттан аз&quot;,
      pluralGenitive: &quot;{{count}} минуттан аз&quot;,
    },
    future: {
      one: &quot;минуттан кем &quot;,
      singularNominative: &quot;{{count}} минуттан кем&quot;,
      singularGenitive: &quot;{{count}} минуттан кем&quot;,
      pluralGenitive: &quot;{{count}} минуттан кем&quot;,
    },
  },

  xMinutes: {
    regular: {
      singularNominative: &quot;{{count}} минут&quot;,
      singularGenitive: &quot;{{count}} минут&quot;,
      pluralGenitive: &quot;{{count}} минут&quot;,
    },
    past: {
      singularNominative: &quot;{{count}} минут бұрын&quot;,
      singularGenitive: &quot;{{count}} минут бұрын&quot;,
      pluralGenitive: &quot;{{count}} минут бұрын&quot;,
    },
    future: {
      singularNominative: &quot;{{count}} минуттан кейін&quot;,
      singularGenitive: &quot;{{count}} минуттан кейін&quot;,
      pluralGenitive: &quot;{{count}} минуттан кейін&quot;,
    },
  },

  aboutXHours: {
    regular: {
      singularNominative: &quot;шамамен {{count}} сағат&quot;,
      singularGenitive: &quot;шамамен {{count}} сағат&quot;,
      pluralGenitive: &quot;шамамен {{count}} сағат&quot;,
    },
    future: {
      singularNominative: &quot;шамамен {{count}} сағаттан кейін&quot;,
      singularGenitive: &quot;шамамен {{count}} сағаттан кейін&quot;,
      pluralGenitive: &quot;шамамен {{count}} сағаттан кейін&quot;,
    },
  },

  xHours: {
    regular: {
      singularNominative: &quot;{{count}} сағат&quot;,
      singularGenitive: &quot;{{count}} сағат&quot;,
      pluralGenitive: &quot;{{count}} сағат&quot;,
    },
  },

  xDays: {
    regular: {
      singularNominative: &quot;{{count}} күн&quot;,
      singularGenitive: &quot;{{count}} күн&quot;,
      pluralGenitive: &quot;{{count}} күн&quot;,
    },
    future: {
      singularNominative: &quot;{{count}} күннен кейін&quot;,
      singularGenitive: &quot;{{count}} күннен кейін&quot;,
      pluralGenitive: &quot;{{count}} күннен кейін&quot;,
    },
  },

  aboutXWeeks: {
    type: &quot;weeks&quot;,
    one: &quot;шамамен 1 апта&quot;,
    other: &quot;шамамен {{count}} апта&quot;,
  },

  xWeeks: {
    type: &quot;weeks&quot;,
    one: &quot;1 апта&quot;,
    other: &quot;{{count}} апта&quot;,
  },

  aboutXMonths: {
    regular: {
      singularNominative: &quot;шамамен {{count}} ай&quot;,
      singularGenitive: &quot;шамамен {{count}} ай&quot;,
      pluralGenitive: &quot;шамамен {{count}} ай&quot;,
    },
    future: {
      singularNominative: &quot;шамамен {{count}} айдан кейін&quot;,
      singularGenitive: &quot;шамамен {{count}} айдан кейін&quot;,
      pluralGenitive: &quot;шамамен {{count}} айдан кейін&quot;,
    },
  },

  xMonths: {
    regular: {
      singularNominative: &quot;{{count}} ай&quot;,
      singularGenitive: &quot;{{count}} ай&quot;,
      pluralGenitive: &quot;{{count}} ай&quot;,
    },
  },

  aboutXYears: {
    regular: {
      singularNominative: &quot;шамамен {{count}} жыл&quot;,
      singularGenitive: &quot;шамамен {{count}} жыл&quot;,
      pluralGenitive: &quot;шамамен {{count}} жыл&quot;,
    },
    future: {
      singularNominative: &quot;шамамен {{count}} жылдан кейін&quot;,
      singularGenitive: &quot;шамамен {{count}} жылдан кейін&quot;,
      pluralGenitive: &quot;шамамен {{count}} жылдан кейін&quot;,
    },
  },

  xYears: {
    regular: {
      singularNominative: &quot;{{count}} жыл&quot;,
      singularGenitive: &quot;{{count}} жыл&quot;,
      pluralGenitive: &quot;{{count}} жыл&quot;,
    },
    future: {
      singularNominative: &quot;{{count}} жылдан кейін&quot;,
      singularGenitive: &quot;{{count}} жылдан кейін&quot;,
      pluralGenitive: &quot;{{count}} жылдан кейін&quot;,
    },
  },

  overXYears: {
    regular: {
      singularNominative: &quot;{{count}} жылдан астам&quot;,
      singularGenitive: &quot;{{count}} жылдан астам&quot;,
      pluralGenitive: &quot;{{count}} жылдан астам&quot;,
    },
    future: {
      singularNominative: &quot;{{count}} жылдан астам&quot;,
      singularGenitive: &quot;{{count}} жылдан астам&quot;,
      pluralGenitive: &quot;{{count}} жылдан астам&quot;,
    },
  },

  almostXYears: {
    regular: {
      singularNominative: &quot;{{count}} жылға жақын&quot;,
      singularGenitive: &quot;{{count}} жылға жақын&quot;,
      pluralGenitive: &quot;{{count}} жылға жақын&quot;,
    },
    future: {
      singularNominative: &quot;{{count}} жылдан кейін&quot;,
      singularGenitive: &quot;{{count}} жылдан кейін&quot;,
      pluralGenitive: &quot;{{count}} жылдан кейін&quot;,
    },
  },
};

function declension(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one && count === 1) return scheme.one;

  const rem10 = count % 10;
  const rem100 = count % 100;

  // 1, 21, 31, ...
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace(&quot;{{count}}&quot;, String(count));

    // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace("{{count}}", String(count));

    // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace("{{count}}", String(count));
  }
}

export const formatDistance = (token, count, options) => {
  const tokenValue = formatDistanceLocale[token];

  if (typeof tokenValue === "function") return tokenValue(options);

  if (tokenValue.type === "weeks") {
    return count === 1
      ? tokenValue.one
      : tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      if (tokenValue.future) {
        return declension(tokenValue.future, count);
      } else {
        return declension(tokenValue.regular, count) + " кейін";
      }
    } else {
      if (tokenValue.past) {
        return declension(tokenValue.past, count);
      } else {
        return declension(tokenValue.regular, count) + " бұрын";
      }
    }
  } else {
    return declension(tokenValue.regular, count);
  }
};

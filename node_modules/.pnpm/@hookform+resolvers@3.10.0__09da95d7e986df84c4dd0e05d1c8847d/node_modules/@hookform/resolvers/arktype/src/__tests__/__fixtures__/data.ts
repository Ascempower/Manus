import { type } from 'arktype';
import { Field, InternalFieldName } from 'react-hook-form';

export const schema = type({
  username: 'string>2&apos;,
  password: &apos;/.*[A-Za-z].*/>8|/.*\\d.*/&apos;,
  repeatPassword: &apos;string>1&apos;,
  accessToken: &apos;string|number&apos;,
  birthYear: &apos;1900<number<2013',
  email: 'email',
  tags: 'string[]',
  enabled: 'boolean',
  url: 'string>1&apos;,
  &apos;like?&apos;: type({
    id: &apos;number&apos;,
    name: &apos;string>3&apos;,
  }).array(),
  dateStr: &apos;Date&apos;,
});

export const validData: typeof schema.infer = {
  username: &apos;Doe&apos;,
  password: &apos;Password123_&apos;,
  repeatPassword: &apos;Password123_&apos;,
  birthYear: 2000,
  email: &apos;john@doe.com&apos;,
  tags: [&apos;tag1&apos;, &apos;tag2&apos;],
  enabled: true,
  accessToken: &apos;accessToken&apos;,
  url: &apos;https://react-hook-form.com/&apos;,
  like: [
    {
      id: 1,
      name: &apos;name&apos;,
    },
  ],
  dateStr: new Date(&apos;2020-01-01&apos;),
};

export const invalidData = {
  password: &apos;___&apos;,
  email: &apos;&apos;,
  birthYear: &apos;birthYear&apos;,
  like: [{ id: &apos;z&apos; }],
  url: &apos;abc&apos;,
};

export const fields: Record<InternalFieldName, Field['_f']> = {
  username: {
    ref: { name: 'username' },
    name: 'username',
  },
  password: {
    ref: { name: 'password' },
    name: 'password',
  },
  email: {
    ref: { name: 'email' },
    name: 'email',
  },
  birthday: {
    ref: { name: 'birthday' },
    name: 'birthday',
  },
};

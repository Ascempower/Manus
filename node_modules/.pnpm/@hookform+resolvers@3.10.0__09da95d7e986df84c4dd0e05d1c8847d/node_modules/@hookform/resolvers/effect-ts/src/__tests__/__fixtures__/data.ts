import { Schema } from 'effect';
import { Field, InternalFieldName } from 'react-hook-form';

export const schema = Schema.Struct({
  username: Schema.String.pipe(
    Schema.nonEmptyString({ message: () => &apos;A username is required&apos; }),
  ),
  password: Schema.String.pipe(
    Schema.pattern(new RegExp(&apos;.*[A-Z].*&apos;), {
      message: () => &apos;At least 1 uppercase letter.&apos;,
    }),
    Schema.pattern(new RegExp(&apos;.*[a-z].*&apos;), {
      message: () => &apos;At least 1 lowercase letter.&apos;,
    }),
    Schema.pattern(new RegExp(&apos;.*\\d.*&apos;), {
      message: () => &apos;At least 1 number.&apos;,
    }),
    Schema.pattern(
      new RegExp(&apos;.*[`~<>?,./!@#$%^&*()\\-_+=&quot;\&apos;|{}\\[\\];:\\\\].*&apos;),
      {
        message: () => &apos;At least 1 special character.&apos;,
      },
    ),
    Schema.minLength(8, { message: () => &apos;Must be at least 8 characters.&apos; }),
  ),
  accessToken: Schema.Union(Schema.String, Schema.Number),
  birthYear: Schema.Number.pipe(
    Schema.greaterThan(1900, {
      message: () => &apos;Must be greater than the year 1900&apos;,
    }),
    Schema.filter((value) => value < new Date().getFullYear(), {
      message: () => &apos;Must be before the current year.&apos;,
    }),
  ),
  email: Schema.String.pipe(
    Schema.pattern(
      new RegExp(
        /^(?!\.)(?!.*\.\.)([A-Z0-9_+-.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9-]*\.)+[A-Z]{2,}$/i,
      ),
      {
        message: () => &apos;A valid email address is required.&apos;,
      },
    ),
  ),
  tags: Schema.Array(
    Schema.Struct({
      name: Schema.String,
    }),
  ),
  luckyNumbers: Schema.Array(Schema.Number),
  enabled: Schema.Boolean,
  animal: Schema.Union(Schema.String, Schema.Literal(&apos;bird&apos;, &apos;snake&apos;)),
  vehicles: Schema.Array(
    Schema.Union(
      Schema.Struct({
        type: Schema.Literal(&apos;car&apos;),
        brand: Schema.String,
        horsepower: Schema.Number,
      }),
      Schema.Struct({
        type: Schema.Literal(&apos;bike&apos;),
        speed: Schema.Number,
      }),
    ),
  ),
});

export const validData: Schema.Schema.Type<typeof schema> = {
  accessToken: &apos;abcd1234&apos;,
  animal: &apos;dog&apos;,
  birthYear: 2000,
  email: &apos;johnDoe@here.there&apos;,
  enabled: true,
  luckyNumbers: [1, 2, 3, 4, 5],
  password: &apos;Super#Secret123&apos;,
  tags: [{ name: &apos;move&apos; }, { name: &apos;over&apos; }, { name: &apos;zod&apos; }, { name: &apos;;)&apos; }],
  username: &apos;johnDoe&apos;,
  vehicles: [
    { type: &apos;bike&apos;, speed: 5 },
    { type: &apos;car&apos;, brand: &apos;BMW&apos;, horsepower: 150 },
  ],
};

export const invalidData = {
  username: &apos;test&apos;,
  password: &apos;Password123&apos;,
  repeatPassword: &apos;Password123&apos;,
  birthYear: 2000,
  accessToken: &apos;1015d809-e99d-41ec-b161-981a3c243df8&apos;,
  email: &apos;john@doe.com&apos;,
  tags: [{ name: &apos;test&apos; }],
  enabled: true,
  animal: [&apos;dog&apos;],
  luckyNumbers: [1, 2, &apos;3&apos;],
  like: [
    {
      id: &apos;1&apos;,
      name: &apos;name&apos;,
    },
  ],
  vehicles: [
    { type: &apos;car&apos;, brand: &apos;BMW&apos;, horsepower: 150 },
    { type: &apos;car&apos;, brand: &apos;Mercedes&apos; },
  ],
};

export const fields: Record<InternalFieldName, Field['_f']> = {
  username: {
    ref: { name: 'username' },
    name: 'username',
  },
  password: {
    ref: { name: 'password' },
    name: 'password',
  },
  email: {
    ref: { name: 'email' },
    name: 'email',
  },
  birthday: {
    ref: { name: 'birthday' },
    name: 'birthday',
  },
};

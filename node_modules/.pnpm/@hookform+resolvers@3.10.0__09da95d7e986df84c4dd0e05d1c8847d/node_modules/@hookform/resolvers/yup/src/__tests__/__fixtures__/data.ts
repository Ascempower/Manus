import { Field, InternalFieldName } from 'react-hook-form';
import * as yup from 'yup';

export const schema = yup.object({
  username: yup.string().matches(/^\w+$/).min(3).max(30).required(),
  password: yup
    .string()
    .matches(new RegExp('.*[A-Z].*'), 'One uppercase character')
    .matches(new RegExp('.*[a-z].*'), 'One lowercase character')
    .matches(new RegExp('.*\\d.*'), 'One number')
    .matches(
      new RegExp('.*[`~<>?,./!@#$%^&*()\\-_+=&quot;\&apos;|{}\\[\\];:\\\\].*&apos;),
      &apos;One special character&apos;,
    )
    .min(8, &apos;Must be at least 8 characters in length&apos;)
    .required(&apos;New Password is required&apos;),
  repeatPassword: yup.ref(&apos;password&apos;),
  accessToken: yup.string(),
  birthYear: yup.number().min(1900).max(2013),
  email: yup.string().email(),
  tags: yup.array(yup.string()),
  enabled: yup.boolean(),
  like: yup.array().of(
    yup.object({
      id: yup.number().required(),
      name: yup.string().length(4).required(),
    }),
  ),
});

export const schemaWithWhen = yup.object({
  name: yup.string().required(),
  value: yup.string().when(&apos;name&apos;, ([name], schema) => {
    return name === &apos;test&apos; ? yup.number().required() : schema;
  }),
});

export const validData = {
  username: &apos;Doe&apos;,
  password: &apos;Password123_&apos;,
  repeatPassword: &apos;Password123_&apos;,
  birthYear: 2000,
  email: &apos;john@doe.com&apos;,
  tags: [&apos;tag1&apos;, &apos;tag2&apos;],
  enabled: true,
  accessToken: &apos;accessToken&apos;,
  like: [
    {
      id: 1,
      name: &apos;name&apos;,
    },
  ],
} satisfies yup.InferType<typeof schema>;

export const invalidData = {
  password: &apos;___&apos;,
  email: &apos;&apos;,
  birthYear: &apos;birthYear&apos;,
  like: [{ id: &apos;z&apos; }],
  // Must be set to &quot;unknown&quot;, otherwise typescript knows that it is invalid
} as unknown as Required<yup.InferType<typeof schema>>;

export const fields: Record<InternalFieldName, Field['_f']> = {
  username: {
    ref: { name: 'username' },
    name: 'username',
  },
  password: {
    ref: { name: 'password' },
    name: 'password',
  },
  email: {
    ref: { name: 'email' },
    name: 'email',
  },
  birthday: {
    ref: { name: 'birthday' },
    name: 'birthday',
  },
};

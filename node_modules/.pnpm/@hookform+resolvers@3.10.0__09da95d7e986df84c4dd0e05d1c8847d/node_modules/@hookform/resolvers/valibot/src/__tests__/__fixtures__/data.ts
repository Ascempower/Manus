import { Field, InternalFieldName } from 'react-hook-form';
import * as v from 'valibot';

export const schema = v.object({
  username: v.pipe(
    v.string(),
    v.minLength(2),
    v.maxLength(30),
    v.regex(/^\w+$/),
  ),
  password: v.pipe(
    v.string('New Password is required'),
    v.regex(new RegExp('.*[A-Z].*'), 'One uppercase character'),
    v.regex(new RegExp('.*[a-z].*'), 'One lowercase character'),
    v.regex(new RegExp('.*\\d.*'), 'One number'),
    v.regex(
      new RegExp('.*[`~<>?,./!@#$%^&*()\\-_+=&quot;\&apos;|{}\\[\\];:\\\\].*&apos;),
      &apos;One special character&apos;,
    ),
    v.minLength(8, &apos;Must be at least 8 characters in length&apos;),
  ),
  repeatPassword: v.string(&apos;Repeat Password is required&apos;),
  accessToken: v.union(
    [
      v.string(&apos;Access token should be a string&apos;),
      v.number(&apos;Access token  should be a number&apos;),
    ],
    &apos;access token is required&apos;,
  ),
  birthYear: v.pipe(
    v.number(&apos;Please enter your birth year&apos;),
    v.minValue(1900),
    v.maxValue(2013),
  ),
  email: v.pipe(v.string(), v.email(&apos;Invalid email address&apos;)),
  tags: v.array(v.string(&apos;Tags should be strings&apos;)),
  enabled: v.boolean(),
  like: v.object({
    id: v.number(&apos;Like id is required&apos;),
    name: v.pipe(
      v.string(&apos;Like name is required&apos;),
      v.minLength(4, &apos;Too short&apos;),
    ),
  }),
});

export const schemaError = v.variant(&apos;type&apos;, [
  v.object({ type: v.literal(&apos;a&apos;) }),
  v.object({ type: v.literal(&apos;b&apos;) }),
]);

export const validSchemaErrorData = { type: &apos;a&apos; };
export const invalidSchemaErrorData = { type: &apos;c&apos; };

export const validData = {
  username: &apos;Doe&apos;,
  password: &apos;Password123_&apos;,
  repeatPassword: &apos;Password123_&apos;,
  birthYear: 2000,
  email: &apos;john@doe.com&apos;,
  tags: [&apos;tag1&apos;, &apos;tag2&apos;],
  enabled: true,
  accessToken: &apos;accessToken&apos;,
  like: {
    id: 1,
    name: &apos;name&apos;,
  },
};

export const invalidData = {
  password: &apos;___&apos;,
  email: &apos;&apos;,
  birthYear: &apos;birthYear&apos;,
  like: { id: &apos;z&apos; },
  tags: [1, 2, 3],
};

export const fields: Record<InternalFieldName, Field['_f']> = {
  username: {
    ref: { name: 'username' },
    name: 'username',
  },
  password: {
    ref: { name: 'password' },
    name: 'password',
  },
  email: {
    ref: { name: 'email' },
    name: 'email',
  },
  birthday: {
    ref: { name: 'birthday' },
    name: 'birthday',
  },
};

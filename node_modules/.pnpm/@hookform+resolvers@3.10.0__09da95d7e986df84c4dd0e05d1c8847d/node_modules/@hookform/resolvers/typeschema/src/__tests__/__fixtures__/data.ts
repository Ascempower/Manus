import { Field, InternalFieldName } from 'react-hook-form';
import { z } from 'zod';

export const schema = z
  .object({
    username: z.string().regex(/^\w+$/).min(3).max(30),
    password: z
      .string()
      .regex(new RegExp('.*[A-Z].*'), 'One uppercase character')
      .regex(new RegExp('.*[a-z].*'), 'One lowercase character')
      .regex(new RegExp('.*\\d.*'), 'One number')
      .regex(
        new RegExp('.*[`~<>?,./!@#$%^&*()\\-_+=&quot;\&apos;|{}\\[\\];:\\\\].*&apos;),
        &apos;One special character&apos;,
      )
      .min(8, &apos;Must be at least 8 characters in length&apos;),
    repeatPassword: z.string(),
    accessToken: z.union([z.string(), z.number()]),
    birthYear: z.number().min(1900).max(2013).optional(),
    email: z.string().email().optional(),
    tags: z.array(z.string()),
    enabled: z.boolean(),
    url: z.string().url(&apos;Custom error url&apos;).or(z.literal(&apos;&apos;)),
    like: z
      .array(
        z.object({
          id: z.number(),
          name: z.string().length(4),
        }),
      )
      .optional(),
    dateStr: z
      .string()
      .transform((value) => new Date(value))
      .refine((value) => !isNaN(value.getTime()), {
        message: &apos;Invalid date&apos;,
      }),
  })
  .refine((obj) => obj.password === obj.repeatPassword, {
    message: &apos;Passwords do not match&apos;,
    path: [&apos;confirm&apos;],
  });

export const validData: z.input<typeof schema> = {
  username: &apos;Doe&apos;,
  password: &apos;Password123_&apos;,
  repeatPassword: &apos;Password123_&apos;,
  birthYear: 2000,
  email: &apos;john@doe.com&apos;,
  tags: [&apos;tag1&apos;, &apos;tag2&apos;],
  enabled: true,
  accessToken: &apos;accessToken&apos;,
  url: &apos;https://react-hook-form.com/&apos;,
  like: [
    {
      id: 1,
      name: &apos;name&apos;,
    },
  ],
  dateStr: &apos;2020-01-01&apos;,
};

export const invalidData = {
  password: &apos;___&apos;,
  email: &apos;&apos;,
  birthYear: &apos;birthYear&apos;,
  like: [{ id: &apos;z&apos; }],
  url: &apos;abc&apos;,
};

export const fields: Record<InternalFieldName, Field['_f']> = {
  username: {
    ref: { name: 'username' },
    name: 'username',
  },
  password: {
    ref: { name: 'password' },
    name: 'password',
  },
  email: {
    ref: { name: 'email' },
    name: 'email',
  },
  birthday: {
    ref: { name: 'birthday' },
    name: 'birthday',
  },
};

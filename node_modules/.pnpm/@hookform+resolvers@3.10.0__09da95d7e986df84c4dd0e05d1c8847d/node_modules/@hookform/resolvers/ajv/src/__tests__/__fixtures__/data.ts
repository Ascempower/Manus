import { JSONSchemaType } from 'ajv';
import { Field, InternalFieldName } from 'react-hook-form';

interface Data {
  username: string;
  password: string;
  deepObject: { data: string; twoLayersDeep: { name: string } };
}

export const schema: JSONSchemaType<Data> = {
  type: &apos;object&apos;,
  properties: {
    username: {
      type: &apos;string&apos;,
      minLength: 3,
    },
    password: {
      type: &apos;string&apos;,
      pattern: &apos;.*[A-Z].*&apos;,
      errorMessage: {
        pattern: &apos;One uppercase character&apos;,
      },
    },
    deepObject: {
      type: &apos;object&apos;,
      properties: {
        data: { type: &apos;string&apos; },
        twoLayersDeep: {
          type: &apos;object&apos;,
          properties: { name: { type: &apos;string&apos; } },
          additionalProperties: false,
          required: [&apos;name&apos;],
        },
      },
      required: [&apos;data&apos;, &apos;twoLayersDeep&apos;],
    },
  },
  required: [&apos;username&apos;, &apos;password&apos;, &apos;deepObject&apos;],
  additionalProperties: false,
};

export const validData: Data = {
  username: &apos;jsun969&apos;,
  password: &apos;validPassword&apos;,
  deepObject: {
    twoLayersDeep: {
      name: &apos;deeper&apos;,
    },
    data: &apos;data&apos;,
  },
};

export const invalidData = {
  username: &apos;__&apos;,
  password: &apos;invalid-password&apos;,
  deepObject: {
    data: 233,
    twoLayersDeep: { name: 123 },
  },
};

export const invalidDataWithUndefined = {
  username: &apos;jsun969&apos;,
  password: undefined,
  deepObject: {
    twoLayersDeep: {
      name: &apos;deeper&apos;,
    },
    data: undefined,
  },
};

export const fields: Record<InternalFieldName, Field['_f']> = {
  username: {
    ref: { name: 'username' },
    name: 'username',
  },
  password: {
    ref: { name: 'password' },
    name: 'password',
  },
  email: {
    ref: { name: 'email' },
    name: 'email',
  },
  birthday: {
    ref: { name: 'birthday' },
    name: 'birthday',
  },
};

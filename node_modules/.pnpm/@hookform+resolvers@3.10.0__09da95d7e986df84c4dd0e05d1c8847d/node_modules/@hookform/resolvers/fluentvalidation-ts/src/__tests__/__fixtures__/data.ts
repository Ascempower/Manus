import { Validator } from 'fluentvalidation-ts';
import { Field, InternalFieldName } from 'react-hook-form';

const beNumeric = (value: string | number | undefined) => !isNaN(Number(value));

export type Schema = {
  username: string;
  password: string;
  repeatPassword: string;
  accessToken?: string;
  birthYear?: number;
  email?: string;
  tags?: string[];
  enabled?: boolean;
  like?: {
    id: number;
    name: string;
  }[];
};

export type SchemaWithWhen = {
  name: string;
  value: string;
};

export class SchemaValidator extends Validator<Schema> {
  constructor() {
    super();

    this.ruleFor(&apos;username&apos;)
      .notEmpty()
      .matches(/^\w+$/)
      .minLength(3)
      .maxLength(30);

    this.ruleFor(&apos;password&apos;)
      .notEmpty()
      .matches(/.*[A-Z].*/)
      .withMessage(&apos;One uppercase character&apos;)
      .matches(/.*[a-z].*/)
      .withMessage(&apos;One lowercase character&apos;)
      .matches(/.*\d.*/)
      .withMessage(&apos;One number&apos;)
      .matches(new RegExp(&apos;.*[`~<>?,./!@#$%^&*()\\-_+=&quot;\&apos;|{}\\[\\];:\\\\].*&apos;))
      .withMessage(&apos;One special character&apos;)
      .minLength(8)
      .withMessage(&apos;Must be at least 8 characters in length&apos;);

    this.ruleFor(&apos;repeatPassword&apos;)
      .notEmpty()
      .must((repeatPassword, data) => repeatPassword === data.password);

    this.ruleFor(&apos;accessToken&apos;);
    this.ruleFor(&apos;birthYear&apos;)
      .must(beNumeric)
      .inclusiveBetween(1900, 2013)
      .when((birthYear) => birthYear != undefined);

    this.ruleFor(&apos;email&apos;).emailAddress();
    this.ruleFor(&apos;tags&apos;);
    this.ruleFor(&apos;enabled&apos;);

    this.ruleForEach(&apos;like&apos;).setValidator(() => new LikeValidator());
  }
}

export class LikeValidator extends Validator<{
  id: number;
  name: string;
}> {
  constructor() {
    super();

    this.ruleFor(&apos;id&apos;).notNull();
    this.ruleFor(&apos;name&apos;).notEmpty().length(4, 4);
  }
}

export const validData = {
  username: &apos;Doe&apos;,
  password: &apos;Password123_&apos;,
  repeatPassword: &apos;Password123_&apos;,
  birthYear: 2000,
  email: &apos;john@doe.com&apos;,
  tags: [&apos;tag1&apos;, &apos;tag2&apos;],
  enabled: true,
  accesstoken: &apos;accesstoken&apos;,
  like: [
    {
      id: 1,
      name: &apos;name&apos;,
    },
  ],
} as Schema;

export const invalidData = {
  password: &apos;___&apos;,
  email: &apos;&apos;,
  birthYear: &apos;birthYear&apos;,
  like: [{ id: &apos;z&apos; }],
  // Must be set to &quot;unknown&quot;, otherwise typescript knows that it is invalid
} as unknown as Required<Schema>;

export const fields: Record<InternalFieldName, Field['_f']> = {
  username: {
    ref: { name: 'username' },
    name: 'username',
  },
  password: {
    ref: { name: 'password' },
    name: 'password',
  },
  email: {
    ref: { name: 'email' },
    name: 'email',
  },
  birthday: {
    ref: { name: 'birthday' },
    name: 'birthday',
  },
};

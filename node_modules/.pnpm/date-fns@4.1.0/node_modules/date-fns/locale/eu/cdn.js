(() => {
var _window$dateFns;function _typeof(o) {&quot;@babel/helpers - typeof&quot;;return _typeof = &quot;function&quot; == typeof Symbol && &quot;symbol&quot; == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && &quot;function&quot; == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? &quot;symbol&quot; : typeof o;}, _typeof(o);}function ownKeys(e, r) {var t = Object.keys(e);if (Object.getOwnPropertySymbols) {var o = Object.getOwnPropertySymbols(e);r && (o = o.filter(function (r) {return Object.getOwnPropertyDescriptor(e, r).enumerable;})), t.push.apply(t, o);}return t;}function _objectSpread(e) {for (var r = 1; r < arguments.length; r++) {var t = null != arguments[r] ? arguments[r] : {};r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {_defineProperty(e, r, t[r]);}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));});}return e;}function _defineProperty(obj, key, value) {key = _toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : String(i);}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);}var __defProp = Object.defineProperty;
var __export = function __export(target, all) {
  for (var name in all)
  __defProp(target, name, {
    get: all[name],
    enumerable: true,
    configurable: true,
    set: function set(newValue) {return all[name] = function () {return newValue;};}
  });
};

// lib/locale/eu/_lib/formatDistance.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "segundo bat baino gutxiago",
    other: "{{count}} segundo baino gutxiago"
  },
  xSeconds: {
    one: "1 segundo",
    other: "{{count}} segundo"
  },
  halfAMinute: "minutu erdi",
  lessThanXMinutes: {
    one: "minutu bat baino gutxiago",
    other: "{{count}} minutu baino gutxiago"
  },
  xMinutes: {
    one: "1 minutu",
    other: "{{count}} minutu"
  },
  aboutXHours: {
    one: "1 ordu gutxi gorabehera",
    other: "{{count}} ordu gutxi gorabehera"
  },
  xHours: {
    one: "1 ordu",
    other: "{{count}} ordu"
  },
  xDays: {
    one: "1 egun",
    other: "{{count}} egun"
  },
  aboutXWeeks: {
    one: "aste 1 inguru",
    other: "{{count}} aste inguru"
  },
  xWeeks: {
    one: "1 aste",
    other: "{{count}} astean"
  },
  aboutXMonths: {
    one: "1 hilabete gutxi gorabehera",
    other: "{{count}} hilabete gutxi gorabehera"
  },
  xMonths: {
    one: "1 hilabete",
    other: "{{count}} hilabete"
  },
  aboutXYears: {
    one: "1 urte gutxi gorabehera",
    other: "{{count}} urte gutxi gorabehera"
  },
  xYears: {
    one: "1 urte",
    other: "{{count}} urte"
  },
  overXYears: {
    one: "1 urte baino gehiago",
    other: "{{count}} urte baino gehiago"
  },
  almostXYears: {
    one: "ia 1 urte",
    other: "ia {{count}} urte"
  }
};
var formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return &quot;en &quot; + result;
    } else {
      return &quot;duela &quot; + result;
    }
  }
  return result;
};

// lib/locale/_lib/buildFormatLongFn.js
function buildFormatLongFn(args) {
  return function () {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

// lib/locale/eu/_lib/formatLong.js
var dateFormats = {
  full: &quot;EEEE, y&apos;ko&apos; MMMM&apos;ren&apos; d&apos;a&apos; y&apos;ren&apos;&quot;,
  long: &quot;y&apos;ko&apos; MMMM&apos;ren&apos; d&apos;a&apos;&quot;,
  medium: &quot;y MMM d&quot;,
  short: &quot;yy/MM/dd&quot;
};
var timeFormats = {
  full: &quot;HH:mm:ss zzzz&quot;,
  long: &quot;HH:mm:ss z&quot;,
  medium: &quot;HH:mm:ss&quot;,
  short: &quot;HH:mm&quot;
};
var dateTimeFormats = {
  full: &quot;{{date}} &apos;tan&apos; {{time}}&quot;,
  long: &quot;{{date}} &apos;tan&apos; {{time}}&quot;,
  medium: &quot;{{date}}, {{time}}&quot;,
  short: &quot;{{date}}, {{time}}&quot;
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: &quot;full&quot;
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: &quot;full&quot;
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: &quot;full&quot;
  })
};

// lib/locale/eu/_lib/formatRelative.js
var formatRelativeLocale = {
  lastWeek: &quot;&apos;joan den&apos; eeee, LT&quot;,
  yesterday: &quot;&apos;atzo,&apos; p&quot;,
  today: &quot;&apos;gaur,&apos; p&quot;,
  tomorrow: &quot;&apos;bihar,&apos; p&quot;,
  nextWeek: &quot;eeee, p&quot;,
  other: &quot;P&quot;
};
var formatRelativeLocalePlural = {
  lastWeek: &quot;&apos;joan den&apos; eeee, p&quot;,
  yesterday: &quot;&apos;atzo,&apos; p&quot;,
  today: &quot;&apos;gaur,&apos; p&quot;,
  tomorrow: &quot;&apos;bihar,&apos; p&quot;,
  nextWeek: &quot;eeee, p&quot;,
  other: &quot;P&quot;
};
var formatRelative = function formatRelative(token, date) {
  if (date.getHours() !== 1) {
    return formatRelativeLocalePlural[token];
  }
  return formatRelativeLocale[token];
};

// lib/locale/_lib/buildLocalizeFn.js
function buildLocalizeFn(args) {
  return function (value, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : &quot;standalone&quot;;
    var valuesArray;
    if (context === &quot;formatting&quot; && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(value) : value;
    return valuesArray[index];
  };
}

// lib/locale/eu/_lib/localize.js
var eraValues = {
  narrow: [&quot;k.a.&quot;, &quot;k.o.&quot;],
  abbreviated: [&quot;k.a.&quot;, &quot;k.o.&quot;],
  wide: [&quot;kristo aurretik&quot;, &quot;kristo ondoren&quot;]
};
var quarterValues = {
  narrow: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;],
  abbreviated: [&quot;1H&quot;, &quot;2H&quot;, &quot;3H&quot;, &quot;4H&quot;],
  wide: [
  &quot;1. hiruhilekoa&quot;,
  &quot;2. hiruhilekoa&quot;,
  &quot;3. hiruhilekoa&quot;,
  &quot;4. hiruhilekoa&quot;]

};
var monthValues = {
  narrow: [&quot;u&quot;, &quot;o&quot;, &quot;m&quot;, &quot;a&quot;, &quot;m&quot;, &quot;e&quot;, &quot;u&quot;, &quot;a&quot;, &quot;i&quot;, &quot;u&quot;, &quot;a&quot;, &quot;a&quot;],
  abbreviated: [
  &quot;urt&quot;,
  &quot;ots&quot;,
  &quot;mar&quot;,
  &quot;api&quot;,
  &quot;mai&quot;,
  &quot;eka&quot;,
  &quot;uzt&quot;,
  &quot;abu&quot;,
  &quot;ira&quot;,
  &quot;urr&quot;,
  &quot;aza&quot;,
  &quot;abe&quot;],

  wide: [
  &quot;urtarrila&quot;,
  &quot;otsaila&quot;,
  &quot;martxoa&quot;,
  &quot;apirila&quot;,
  &quot;maiatza&quot;,
  &quot;ekaina&quot;,
  &quot;uztaila&quot;,
  &quot;abuztua&quot;,
  &quot;iraila&quot;,
  &quot;urria&quot;,
  &quot;azaroa&quot;,
  &quot;abendua&quot;]

};
var dayValues = {
  narrow: [&quot;i&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;o&quot;, &quot;o&quot;, &quot;l&quot;],
  short: [&quot;ig&quot;, &quot;al&quot;, &quot;as&quot;, &quot;az&quot;, &quot;og&quot;, &quot;or&quot;, &quot;lr&quot;],
  abbreviated: [&quot;iga&quot;, &quot;ast&quot;, &quot;ast&quot;, &quot;ast&quot;, &quot;ost&quot;, &quot;ost&quot;, &quot;lar&quot;],
  wide: [
  &quot;igandea&quot;,
  &quot;astelehena&quot;,
  &quot;asteartea&quot;,
  &quot;asteazkena&quot;,
  &quot;osteguna&quot;,
  &quot;ostirala&quot;,
  &quot;larunbata&quot;]

};
var dayPeriodValues = {
  narrow: {
    am: &quot;a&quot;,
    pm: &quot;p&quot;,
    midnight: &quot;ge&quot;,
    noon: &quot;eg&quot;,
    morning: &quot;goiza&quot;,
    afternoon: &quot;arratsaldea&quot;,
    evening: &quot;arratsaldea&quot;,
    night: &quot;gaua&quot;
  },
  abbreviated: {
    am: &quot;AM&quot;,
    pm: &quot;PM&quot;,
    midnight: &quot;gauerdia&quot;,
    noon: &quot;eguerdia&quot;,
    morning: &quot;goiza&quot;,
    afternoon: &quot;arratsaldea&quot;,
    evening: &quot;arratsaldea&quot;,
    night: &quot;gaua&quot;
  },
  wide: {
    am: &quot;a.m.&quot;,
    pm: &quot;p.m.&quot;,
    midnight: &quot;gauerdia&quot;,
    noon: &quot;eguerdia&quot;,
    morning: &quot;goiza&quot;,
    afternoon: &quot;arratsaldea&quot;,
    evening: &quot;arratsaldea&quot;,
    night: &quot;gaua&quot;
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: &quot;a&quot;,
    pm: &quot;p&quot;,
    midnight: &quot;ge&quot;,
    noon: &quot;eg&quot;,
    morning: &quot;goizean&quot;,
    afternoon: &quot;arratsaldean&quot;,
    evening: &quot;arratsaldean&quot;,
    night: &quot;gauean&quot;
  },
  abbreviated: {
    am: &quot;AM&quot;,
    pm: &quot;PM&quot;,
    midnight: &quot;gauerdia&quot;,
    noon: &quot;eguerdia&quot;,
    morning: &quot;goizean&quot;,
    afternoon: &quot;arratsaldean&quot;,
    evening: &quot;arratsaldean&quot;,
    night: &quot;gauean&quot;
  },
  wide: {
    am: &quot;a.m.&quot;,
    pm: &quot;p.m.&quot;,
    midnight: &quot;gauerdia&quot;,
    noon: &quot;eguerdia&quot;,
    morning: &quot;goizean&quot;,
    afternoon: &quot;arratsaldean&quot;,
    evening: &quot;arratsaldean&quot;,
    night: &quot;gauean&quot;
  }
};
var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + &quot;.&quot;;
};
var localize = {
  ordinalNumber: ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: &quot;wide&quot;
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: &quot;wide&quot;,
    argumentCallback: function argumentCallback(quarter) {return quarter - 1;}
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: &quot;wide&quot;
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: &quot;wide&quot;
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: &quot;wide&quot;,
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: &quot;wide&quot;
  })
};

// lib/locale/_lib/buildMatchFn.js
function buildMatchFn(args) {
  return function (string) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {return pattern.test(matchedString);}) : findKey(parsePatterns, function (pattern) {return pattern.test(matchedString);});
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return { value: value, rest: rest };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {
      return key;
    }
  }
  return;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return;
}

// lib/locale/_lib/buildMatchPatternFn.js
function buildMatchPatternFn(args) {
  return function (string) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
    return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
    return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return { value: value, rest: rest };
  };
}

// lib/locale/eu/_lib/match.js
var matchOrdinalNumberPattern = /^(\d+)(.)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(k.a.|k.o.)/i,
  abbreviated: /^(k.a.|k.o.)/i,
  wide: /^(kristo aurretik|kristo ondoren)/i
};
var parseEraPatterns = {
  narrow: [/^k.a./i, /^k.o./i],
  abbreviated: [/^(k.a.)/i, /^(k.o.)/i],
  wide: [/^(kristo aurretik)/i, /^(kristo ondoren)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]H/i,
  wide: /^[1234](.)? hiruhilekoa/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[uomaei]/i,
  abbreviated: /^(urt|ots|mar|api|mai|eka|uzt|abu|ira|urr|aza|abe)/i,
  wide: /^(urtarrila|otsaila|martxoa|apirila|maiatza|ekaina|uztaila|abuztua|iraila|urria|azaroa|abendua)/i
};
var parseMonthPatterns = {
  narrow: [
  /^u/i,
  /^o/i,
  /^m/i,
  /^a/i,
  /^m/i,
  /^e/i,
  /^u/i,
  /^a/i,
  /^i/i,
  /^u/i,
  /^a/i,
  /^a/i],

  any: [
  /^urt/i,
  /^ots/i,
  /^mar/i,
  /^api/i,
  /^mai/i,
  /^eka/i,
  /^uzt/i,
  /^abu/i,
  /^ira/i,
  /^urr/i,
  /^aza/i,
  /^abe/i]

};
var matchDayPatterns = {
  narrow: /^[iaol]/i,
  short: /^(ig|al|as|az|og|or|lr)/i,
  abbreviated: /^(iga|ast|ast|ast|ost|ost|lar)/i,
  wide: /^(igandea|astelehena|asteartea|asteazkena|osteguna|ostirala|larunbata)/i
};
var parseDayPatterns = {
  narrow: [/^i/i, /^a/i, /^a/i, /^a/i, /^o/i, /^o/i, /^l/i],
  short: [/^ig/i, /^al/i, /^as/i, /^az/i, /^og/i, /^or/i, /^lr/i],
  abbreviated: [/^iga/i, /^ast/i, /^ast/i, /^ast/i, /^ost/i, /^ost/i, /^lar/i],
  wide: [
  /^igandea/i,
  /^astelehena/i,
  /^asteartea/i,
  /^asteazkena/i,
  /^osteguna/i,
  /^ostirala/i,
  /^larunbata/i]

};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|ge|eg|((goiza|goizean)|arratsaldea|(gaua|gauean)))/i,
  any: /^([ap]\.?\s?m\.?|gauerdia|eguerdia|((goiza|goizean)|arratsaldea|(gaua|gauean)))/i
};
var parseDayPeriodPatterns = {
  narrow: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^ge/i,
    noon: /^eg/i,
    morning: /goiz/i,
    afternoon: /arratsaldea/i,
    evening: /arratsaldea/i,
    night: /gau/i
  },
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^gauerdia/i,
    noon: /^eguerdia/i,
    morning: /goiz/i,
    afternoon: /arratsaldea/i,
    evening: /arratsaldea/i,
    night: /gau/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {return parseInt(value, 10);}
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "wide"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback(index) {return index + 1;}
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "wide"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};

// lib/locale/eu.js
var eu = {
  code: "eu",
  formatDistance: formatDistance,
  formatLong: formatLong,
  formatRelative: formatRelative,
  localize: localize,
  match: match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};

// lib/locale/eu/cdn.js
window.dateFns = _objectSpread(_objectSpread({},
window.dateFns), {}, {
  locale: _objectSpread(_objectSpread({}, (_window$dateFns =
  window.dateFns) === null || _window$dateFns === void 0 ? void 0 : _window$dateFns.locale), {}, {
    eu: eu }) });



//# debugId=C22264D9A0261B1964756E2164756E21

//# sourceMappingURL=cdn.js.map
})();
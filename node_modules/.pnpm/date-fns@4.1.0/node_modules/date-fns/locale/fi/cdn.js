(() => {
var _window$dateFns;function _typeof(o) {&quot;@babel/helpers - typeof&quot;;return _typeof = &quot;function&quot; == typeof Symbol && &quot;symbol&quot; == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && &quot;function&quot; == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? &quot;symbol&quot; : typeof o;}, _typeof(o);}function ownKeys(e, r) {var t = Object.keys(e);if (Object.getOwnPropertySymbols) {var o = Object.getOwnPropertySymbols(e);r && (o = o.filter(function (r) {return Object.getOwnPropertyDescriptor(e, r).enumerable;})), t.push.apply(t, o);}return t;}function _objectSpread(e) {for (var r = 1; r < arguments.length; r++) {var t = null != arguments[r] ? arguments[r] : {};r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {_defineProperty(e, r, t[r]);}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));});}return e;}function _defineProperty(obj, key, value) {key = _toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : String(i);}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);}var __defProp = Object.defineProperty;
var __export = function __export(target, all) {
  for (var name in all)
  __defProp(target, name, {
    get: all[name],
    enumerable: true,
    configurable: true,
    set: function set(newValue) {return all[name] = function () {return newValue;};}
  });
};

// lib/locale/fi/_lib/formatDistance.js
function futureSeconds(text) {
  return text.replace(/sekuntia?/, "sekunnin");
}
function futureMinutes(text) {
  return text.replace(/minuuttia?/, "minuutin");
}
function futureHours(text) {
  return text.replace(/tuntia?/, "tunnin");
}
function futureDays(text) {
  return text.replace(/päivää?/, "p\xE4iv\xE4n");
}
function futureWeeks(text) {
  return text.replace(/(viikko|viikkoa)/, "viikon");
}
function futureMonths(text) {
  return text.replace(/(kuukausi|kuukautta)/, "kuukauden");
}
function futureYears(text) {
  return text.replace(/(vuosi|vuotta)/, "vuoden");
}
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "alle sekunti",
    other: "alle {{count}} sekuntia",
    futureTense: futureSeconds
  },
  xSeconds: {
    one: "sekunti",
    other: "{{count}} sekuntia",
    futureTense: futureSeconds
  },
  halfAMinute: {
    one: "puoli minuuttia",
    other: "puoli minuuttia",
    futureTense: function futureTense(_text) {return "puolen minuutin";}
  },
  lessThanXMinutes: {
    one: "alle minuutti",
    other: "alle {{count}} minuuttia",
    futureTense: futureMinutes
  },
  xMinutes: {
    one: "minuutti",
    other: "{{count}} minuuttia",
    futureTense: futureMinutes
  },
  aboutXHours: {
    one: "noin tunti",
    other: "noin {{count}} tuntia",
    futureTense: futureHours
  },
  xHours: {
    one: "tunti",
    other: "{{count}} tuntia",
    futureTense: futureHours
  },
  xDays: {
    one: "p\xE4iv\xE4",
    other: "{{count}} p\xE4iv\xE4\xE4",
    futureTense: futureDays
  },
  aboutXWeeks: {
    one: "noin viikko",
    other: "noin {{count}} viikkoa",
    futureTense: futureWeeks
  },
  xWeeks: {
    one: "viikko",
    other: "{{count}} viikkoa",
    futureTense: futureWeeks
  },
  aboutXMonths: {
    one: "noin kuukausi",
    other: "noin {{count}} kuukautta",
    futureTense: futureMonths
  },
  xMonths: {
    one: "kuukausi",
    other: "{{count}} kuukautta",
    futureTense: futureMonths
  },
  aboutXYears: {
    one: "noin vuosi",
    other: "noin {{count}} vuotta",
    futureTense: futureYears
  },
  xYears: {
    one: "vuosi",
    other: "{{count}} vuotta",
    futureTense: futureYears
  },
  overXYears: {
    one: "yli vuosi",
    other: "yli {{count}} vuotta",
    futureTense: futureYears
  },
  almostXYears: {
    one: "l\xE4hes vuosi",
    other: "l\xE4hes {{count}} vuotta",
    futureTense: futureYears
  }
};
var formatDistance = function formatDistance(token, count, options) {
  var tokenValue = formatDistanceLocale[token];
  var result = count === 1 ? tokenValue.one : tokenValue.other.replace("{{count}}", String(count));
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return tokenValue.futureTense(result) + &quot; kuluttua&quot;;
    } else {
      return result + &quot; sitten&quot;;
    }
  }
  return result;
};

// lib/locale/_lib/buildFormatLongFn.js
function buildFormatLongFn(args) {
  return function () {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

// lib/locale/fi/_lib/formatLong.js
var dateFormats = {
  full: &quot;eeee d. MMMM y&quot;,
  long: &quot;d. MMMM y&quot;,
  medium: &quot;d. MMM y&quot;,
  short: &quot;d.M.y&quot;
};
var timeFormats = {
  full: &quot;HH.mm.ss zzzz&quot;,
  long: &quot;HH.mm.ss z&quot;,
  medium: &quot;HH.mm.ss&quot;,
  short: &quot;HH.mm&quot;
};
var dateTimeFormats = {
  full: &quot;{{date}} &apos;klo&apos; {{time}}&quot;,
  long: &quot;{{date}} &apos;klo&apos; {{time}}&quot;,
  medium: &quot;{{date}} {{time}}&quot;,
  short: &quot;{{date}} {{time}}&quot;
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: &quot;full&quot;
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: &quot;full&quot;
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: &quot;full&quot;
  })
};

// lib/locale/fi/_lib/formatRelative.js
var formatRelativeLocale = {
  lastWeek: &quot;&apos;viime&apos; eeee &apos;klo&apos; p&quot;,
  yesterday: &quot;&apos;eilen klo&apos; p&quot;,
  today: &quot;&apos;t\xE4n\xE4\xE4n klo&apos; p&quot;,
  tomorrow: &quot;&apos;huomenna klo&apos; p&quot;,
  nextWeek: &quot;&apos;ensi&apos; eeee &apos;klo&apos; p&quot;,
  other: &quot;P&quot;
};
var formatRelative = function formatRelative(token, _date, _baseDate, _options) {return formatRelativeLocale[token];};

// lib/locale/_lib/buildLocalizeFn.js
function buildLocalizeFn(args) {
  return function (value, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : &quot;standalone&quot;;
    var valuesArray;
    if (context === &quot;formatting&quot; && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(value) : value;
    return valuesArray[index];
  };
}

// lib/locale/fi/_lib/localize.js
var eraValues = {
  narrow: [&quot;eaa.&quot;, &quot;jaa.&quot;],
  abbreviated: [&quot;eaa.&quot;, &quot;jaa.&quot;],
  wide: [&quot;ennen ajanlaskun alkua&quot;, &quot;j\xE4lkeen ajanlaskun alun&quot;]
};
var quarterValues = {
  narrow: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;],
  abbreviated: [&quot;Q1&quot;, &quot;Q2&quot;, &quot;Q3&quot;, &quot;Q4&quot;],
  wide: [&quot;1. kvartaali&quot;, &quot;2. kvartaali&quot;, &quot;3. kvartaali&quot;, &quot;4. kvartaali&quot;]
};
var monthValues = {
  narrow: [&quot;T&quot;, &quot;H&quot;, &quot;M&quot;, &quot;H&quot;, &quot;T&quot;, &quot;K&quot;, &quot;H&quot;, &quot;E&quot;, &quot;S&quot;, &quot;L&quot;, &quot;M&quot;, &quot;J&quot;],
  abbreviated: [
  &quot;tammi&quot;,
  &quot;helmi&quot;,
  &quot;maalis&quot;,
  &quot;huhti&quot;,
  &quot;touko&quot;,
  &quot;kes\xE4&quot;,
  &quot;hein\xE4&quot;,
  &quot;elo&quot;,
  &quot;syys&quot;,
  &quot;loka&quot;,
  &quot;marras&quot;,
  &quot;joulu&quot;],

  wide: [
  &quot;tammikuu&quot;,
  &quot;helmikuu&quot;,
  &quot;maaliskuu&quot;,
  &quot;huhtikuu&quot;,
  &quot;toukokuu&quot;,
  &quot;kes\xE4kuu&quot;,
  &quot;hein\xE4kuu&quot;,
  &quot;elokuu&quot;,
  &quot;syyskuu&quot;,
  &quot;lokakuu&quot;,
  &quot;marraskuu&quot;,
  &quot;joulukuu&quot;]

};
var formattingMonthValues = {
  narrow: monthValues.narrow,
  abbreviated: monthValues.abbreviated,
  wide: [
  &quot;tammikuuta&quot;,
  &quot;helmikuuta&quot;,
  &quot;maaliskuuta&quot;,
  &quot;huhtikuuta&quot;,
  &quot;toukokuuta&quot;,
  &quot;kes\xE4kuuta&quot;,
  &quot;hein\xE4kuuta&quot;,
  &quot;elokuuta&quot;,
  &quot;syyskuuta&quot;,
  &quot;lokakuuta&quot;,
  &quot;marraskuuta&quot;,
  &quot;joulukuuta&quot;]

};
var dayValues = {
  narrow: [&quot;S&quot;, &quot;M&quot;, &quot;T&quot;, &quot;K&quot;, &quot;T&quot;, &quot;P&quot;, &quot;L&quot;],
  short: [&quot;su&quot;, &quot;ma&quot;, &quot;ti&quot;, &quot;ke&quot;, &quot;to&quot;, &quot;pe&quot;, &quot;la&quot;],
  abbreviated: [&quot;sunn.&quot;, &quot;maan.&quot;, &quot;tiis.&quot;, &quot;kesk.&quot;, &quot;torst.&quot;, &quot;perj.&quot;, &quot;la&quot;],
  wide: [
  &quot;sunnuntai&quot;,
  &quot;maanantai&quot;,
  &quot;tiistai&quot;,
  &quot;keskiviikko&quot;,
  &quot;torstai&quot;,
  &quot;perjantai&quot;,
  &quot;lauantai&quot;]

};
var formattingDayValues = {
  narrow: dayValues.narrow,
  short: dayValues.short,
  abbreviated: dayValues.abbreviated,
  wide: [
  &quot;sunnuntaina&quot;,
  &quot;maanantaina&quot;,
  &quot;tiistaina&quot;,
  &quot;keskiviikkona&quot;,
  &quot;torstaina&quot;,
  &quot;perjantaina&quot;,
  &quot;lauantaina&quot;]

};
var dayPeriodValues = {
  narrow: {
    am: &quot;ap&quot;,
    pm: &quot;ip&quot;,
    midnight: &quot;keskiy\xF6&quot;,
    noon: &quot;keskip\xE4iv\xE4&quot;,
    morning: &quot;ap&quot;,
    afternoon: &quot;ip&quot;,
    evening: &quot;illalla&quot;,
    night: &quot;y\xF6ll\xE4&quot;
  },
  abbreviated: {
    am: &quot;ap&quot;,
    pm: &quot;ip&quot;,
    midnight: &quot;keskiy\xF6&quot;,
    noon: &quot;keskip\xE4iv\xE4&quot;,
    morning: &quot;ap&quot;,
    afternoon: &quot;ip&quot;,
    evening: &quot;illalla&quot;,
    night: &quot;y\xF6ll\xE4&quot;
  },
  wide: {
    am: &quot;ap&quot;,
    pm: &quot;ip&quot;,
    midnight: &quot;keskiy\xF6ll\xE4&quot;,
    noon: &quot;keskip\xE4iv\xE4ll\xE4&quot;,
    morning: &quot;aamup\xE4iv\xE4ll\xE4&quot;,
    afternoon: &quot;iltap\xE4iv\xE4ll\xE4&quot;,
    evening: &quot;illalla&quot;,
    night: &quot;y\xF6ll\xE4&quot;
  }
};
var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + &quot;.&quot;;
};
var localize = {
  ordinalNumber: ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: &quot;wide&quot;
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: &quot;wide&quot;,
    argumentCallback: function argumentCallback(quarter) {return quarter - 1;}
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: &quot;wide&quot;,
    formattingValues: formattingMonthValues,
    defaultFormattingWidth: &quot;wide&quot;
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: &quot;wide&quot;,
    formattingValues: formattingDayValues,
    defaultFormattingWidth: &quot;wide&quot;
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: &quot;wide&quot;
  })
};

// lib/locale/_lib/buildMatchFn.js
function buildMatchFn(args) {
  return function (string) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {return pattern.test(matchedString);}) : findKey(parsePatterns, function (pattern) {return pattern.test(matchedString);});
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return { value: value, rest: rest };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {
      return key;
    }
  }
  return;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return;
}

// lib/locale/_lib/buildMatchPatternFn.js
function buildMatchPatternFn(args) {
  return function (string) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
    return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
    return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return { value: value, rest: rest };
  };
}

// lib/locale/fi/_lib/match.js
var matchOrdinalNumberPattern = /^(\d+)(\.)/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(e|j)/i,
  abbreviated: /^(eaa.|jaa.)/i,
  wide: /^(ennen ajanlaskun alkua|jälkeen ajanlaskun alun)/i
};
var parseEraPatterns = {
  any: [/^e/i, /^j/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]\.? kvartaali/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[thmkeslj]/i,
  abbreviated: /^(tammi|helmi|maalis|huhti|touko|kesä|heinä|elo|syys|loka|marras|joulu)/i,
  wide: /^(tammikuu|helmikuu|maaliskuu|huhtikuu|toukokuu|kesäkuu|heinäkuu|elokuu|syyskuu|lokakuu|marraskuu|joulukuu)(ta)?/i
};
var parseMonthPatterns = {
  narrow: [
  /^t/i,
  /^h/i,
  /^m/i,
  /^h/i,
  /^t/i,
  /^k/i,
  /^h/i,
  /^e/i,
  /^s/i,
  /^l/i,
  /^m/i,
  /^j/i],

  any: [
  /^ta/i,
  /^hel/i,
  /^maa/i,
  /^hu/i,
  /^to/i,
  /^k/i,
  /^hei/i,
  /^e/i,
  /^s/i,
  /^l/i,
  /^mar/i,
  /^j/i]

};
var matchDayPatterns = {
  narrow: /^[smtkpl]/i,
  short: /^(su|ma|ti|ke|to|pe|la)/i,
  abbreviated: /^(sunn.|maan.|tiis.|kesk.|torst.|perj.|la)/i,
  wide: /^(sunnuntai|maanantai|tiistai|keskiviikko|torstai|perjantai|lauantai)(na)?/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^k/i, /^t/i, /^p/i, /^l/i],
  any: [/^s/i, /^m/i, /^ti/i, /^k/i, /^to/i, /^p/i, /^l/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(ap|ip|keskiyö|keskipäivä|aamupäivällä|iltapäivällä|illalla|yöllä)/i,
  any: /^(ap|ip|keskiyöllä|keskipäivällä|aamupäivällä|iltapäivällä|illalla|yöllä)/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^ap/i,
    pm: /^ip/i,
    midnight: /^keskiyö/i,
    noon: /^keskipäivä/i,
    morning: /aamupäivällä/i,
    afternoon: /iltapäivällä/i,
    evening: /illalla/i,
    night: /yöllä/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {return parseInt(value, 10);}
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback(index) {return index + 1;}
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};

// lib/locale/fi.js
var fi = {
  code: "fi",
  formatDistance: formatDistance,
  formatLong: formatLong,
  formatRelative: formatRelative,
  localize: localize,
  match: match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};

// lib/locale/fi/cdn.js
window.dateFns = _objectSpread(_objectSpread({},
window.dateFns), {}, {
  locale: _objectSpread(_objectSpread({}, (_window$dateFns =
  window.dateFns) === null || _window$dateFns === void 0 ? void 0 : _window$dateFns.locale), {}, {
    fi: fi }) });



//# debugId=79CA48FD1996640664756E2164756E21

//# sourceMappingURL=cdn.js.map
})();